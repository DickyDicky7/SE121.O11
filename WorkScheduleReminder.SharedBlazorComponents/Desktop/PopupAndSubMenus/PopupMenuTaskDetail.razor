@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@implements IDisposable
@inject Supabase.Client SupabaseClient
@using Supabase.Realtime
@using Supabase.Realtime.PostgresChanges
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService


<Animate style="width:100%;height:100%;"
		 Animation="Animations.FadeDown"
		 Duration="TimeSpan.FromSeconds(0.5)">
	<MudPaper Class="d-flex flex-column gap-2 justify-start pa-2"
			  Style="border-radius:20px;"
			  Elevation="10"
			  Width="500px"
			  MaxHeight="90vh" @attributes="AdditionalAttributes">
		@*link and buttons*@
		<MudPaper Class="d-flex flex-row pa-2"
				  Elevation="0"
				  Width="100%">
			<MudText>@Link</MudText>
			<MudPaper Class="d-flex flex-grow-1" Elevation="0" />
			<MudPaper Class="d-flex flex-row gap-2"
					  Elevation="0">
				<MudToggleIconButton @bind-Toggled=@InMyDay
									 Class="rounded-cycle"
									 Size="Size.Small"
									 ToggledSize="Size.Small"
									 Title="Add to My day"
									 ToggledTitle="Remove form My day"
									 Icon="@Icons.Material.Filled.AddCircle"
									 ToggledIcon="@Icons.Material.Filled.AddCircle"
									 Color="Color.Default"
									 ToggledColor="Color.Tertiary" />
				<MudToggleIconButton @bind-Toggled=@Complete
									 Class="rounded-cycle"
									 Size="Size.Small"
									 ToggledSize="Size.Small"
									 Title="Mark as done"
									 ToggledTitle="Mark as undone"
									 Icon="@Icons.Material.Filled.Done"
									 ToggledIcon="@Icons.Material.Filled.Done"
									 Color="Color.Default"
									 ToggledColor="Color.Tertiary" />
				<MudIconButton Class="rounded-cycle"
							   Size="Size.Small"
							   Title="Delete task"
							   Icon="@Icons.Material.Filled.Delete"
							   Disabled=@(!Complete)
							   Color="Color.Default"
							   OnClick="DeleteTask" />
			</MudPaper>
		</MudPaper>
		@*title*@
		<MudText Class="mx-2"
				 Style="font-size:xx-large;font-weight:bold;">
			@Task.Name
		</MudText>
		@*remind me and tag*@
		<MudPaper Class="d-flex flex-row gap-2 px-2"
				  Elevation="0">
			<MudButton Class="rounded-pill"
					   Size=Size.Small
					   StartIcon="@Icons.Material.Filled.Alarm"
					   Color="Color.Default"
					   OnClick="ToggleReminderVisible">
				Remind me
			</MudButton>
			<MudButton Class="rounded-pill align-content-start"
					   Size=Size.Small
					   StartIcon="@Icons.Material.Filled.Tag"
					   Color="Color.Default"
					   OnClick="ToggleTagVisible">
				Tag
			</MudButton>
			@if (Task.BoardId != null)
			{
				<MudButton Class="rounded-pill"
						   Size=Size.Small
						   StartIcon="@Icons.Material.Filled.People"
						   Color="Color.Default"
						   OnClick="ToggleAssignVisible">
					Assign
				</MudButton>
				<MudButton Class="rounded-pill align-content-start"
						   Size=Size.Small
						   StartIcon="@Icons.Material.Filled.ArrowRight"
						   Color="Color.Default"
						   OnClick="ToggleSectionVisible">
					Section
				</MudButton>
			}
		</MudPaper>
		@*note*@
		<MudPaper Class="d-flex flex-column gap-1 px-2"
				  Elevation="0">
			<MudText Style="font-size:large;font-weight:500;">
				Note
			</MudText>
			<MudTextField @bind-Value="Note"
						  Class=""
						  Placeholder="Name your subtask"
						  Immediate="true"
						  DisableUnderLine="true"
						  FullWidth="true"
						  Variant="Variant.Outlined"
						  Lines="3" />
		</MudPaper>
		@*subtasks*@
		<MudPaper Class="d-flex flex-column gap-1 px-2"
				  Style="overflow:hidden;"
				  Elevation="0">
			<MudText Style="font-size:large;font-weight:500;">
				Subtask
			</MudText>
			<MudPaper Class="d-flex flex-column"
					  Style="overflow:auto;"
					  Elevation="0"
					  Width="100%"
					  MaxHeight="150px">
				@foreach (Subtask subtask in Subtasks)
				{
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudCheckBox @bind-Checked=subtask.Checked
									 Size="Size.Small"
									 Label="@subtask.Name"
									 Dense="true" />
						<MudIconButton Icon="@Icons.Material.Filled.Delete"
									   Disabled="@(!subtask.Checked)"
									   Size="Size.Small"
									   OnClick=@(RemoveSubtask(subtask)) />
					</MudPaper>
				}
			</MudPaper>
			<MudTextField @bind-Value="NewSubTask"
						  Class=""
						  Placeholder="Name your subtask"
						  Immediate="true"
						  DisableUnderLine="true"
						  FullWidth="true"
						  Variant="Variant.Outlined"
						  Margin="Margin.Dense"
						  TextUpdateSuppression="false"
						  OnKeyDown="((KeyboardEventArgs e)=>AddSubtask(e))" />
		</MudPaper>
		@*attachments*@
		<MudPaper Class="d-flex flex-column gap-1 px-2"
				  Style="overflow:hidden;"
				  Elevation="0">
			<MudText Style="font-size:large;font-weight:500;">
				Attachments
			</MudText>
			<MudFileUpload T="IReadOnlyList<IBrowserFile>"
						   FilesChanged="FilesChanged"
						   AppendMultipleFiles="true">
				<ButtonTemplate>
					<MudButton HtmlTag="label"
							   Variant="Variant.Filled"
							   Color="Color.Primary"
							   StartIcon="@Icons.Material.Filled.CloudUpload"
							   FullWidth="true"
							   for="@context">
						<MudText>
							Upload Files
						</MudText>
					</MudButton>
				</ButtonTemplate>
			</MudFileUpload>
			<MudPaper Class="d-flex flex-column"
					  Style="overflow:auto;"
					  Elevation="0"
					  Width="100%"
					  MaxHeight="150px">
				@foreach (IBrowserFile File in Files)
				{
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class="d-flex flex-row align-center"
								  Elevation="0">
							<MudIconButton Size="Size.Small"
										   Icon="@Icons.Material.Filled.CloudDownload" />
							<MudText>
								@File.Name
							</MudText>
						</MudPaper>
						<MudIconButton Size="Size.Small"
									   Icon="@Icons.Material.Filled.Delete"
									   OnClick="@(()=>DeleteFile(@File))" />
					</MudPaper>
				}
				<Virtualize Context="attachment" Items="Attachments">
					<MudPaper @key=@(attachment)
							  Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class="d-flex flex-row align-center"
								  Elevation="0">
							<MudIconButton Size="Size.Small"
										   Icon="@Icons.Material.Filled.CloudDownload" />
							<MudText>
								@attachment.Split('/').Last()
							</MudText>
						</MudPaper>
						<MudIconButton Size="Size.Small"
									   Icon="@Icons.Material.Filled.Delete"
									   OnClick=@(DeleteAttachment(attachment)) />
					</MudPaper>
				</Virtualize>
			</MudPaper>
			<MudButton Class="rounded-pill"
					   Size="Size.Small"
					   Color="Color.Error"
					   Disabled="@(!Files.Any())"
					   OnClick="ClearFileList">
				Clear
			</MudButton>
		</MudPaper>
	</MudPaper>
</Animate>
<MudOverlay Class="border-2"
			Visible="ReminderVisible"
			DarkBackground="true"
			AutoClose="true"
			ZIndex="30"
			OnClick="ToggleReminderVisible">
	<Reminder @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
			Visible="TagVisible"
			DarkBackground="true"
			AutoClose="true"
			ZIndex="30"
			OnClick="ToggleTagVisible">
	<TagAndTagging @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
			Visible="SectionVisible"
			DarkBackground="true"
			AutoClose="true"
			ZIndex="30"
			OnClick="ToggleSectionVisible">
	<SelectSection @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
			Visible="AssignVisible"
			DarkBackground="true"
			AutoClose="true"
			ZIndex="30"
			OnClick="ToggleAssignVisible">
	<SelectAssignee @onclick:stopPropagation />
</MudOverlay>

@code
{
	public bool TagVisible { get; set; } = false;
	public bool ReminderVisible { get; set; } = false;
	public bool AssignVisible { get; set; } = false;
	public bool SectionVisible { get; set; } = false;
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }
	[Parameter]
	public string Link { get; set; } = "Example/Link";
	[Parameter]
	[EditorRequired]
	public Models.Task Task { get; set; } = null!;
	[Parameter]
	[EditorRequired]
	public string Page { get; set; } = null!;

	public bool InMyDay { get; set; } = false;
	public bool Complete { get; set; } = false;
	public string Note { get; set; } = string.Empty;
	public string NewSubTask { get; set; } = string.Empty;

	// public record SubTask
	// {
	// 	public string Name { get; set; } = string.Empty;
	// 	public bool Complete { get; set; } = false;
	// }

	public record Subtask
	{
		public string Name { get; set; } = null!;
		public bool Checked { get; set; } = false;
	}

	public List<Subtask> Subtasks { get; set; } = null!;
	public List<string> Attachments { get; set; } = null!;
	public List<IBrowserFile> Files { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		Subtasks = JsonConvert.DeserializeObject<List<Subtask>>(Task.Checklist) ?? new();
		Attachments = JsonConvert.DeserializeObject<List<string>>(Task.Attachments) ?? new();
	}


	public void FilesChanged(IReadOnlyList<IBrowserFile> _)
	{
		using (var r = new StreamReader(_[0].OpenReadStream()))
		{

		}
		// SupabaseClient.Storage.From("").Upload()
		System.Diagnostics.Debug.WriteLine(JsonConvert.SerializeObject(_));
		foreach (IBrowserFile File in _)
		{
			Files.Add(File);
		}
	}
	public void ClearFileList()
	{
		Files.Clear();
	}
	public void DeleteFile(IBrowserFile File)
	{
		Files.Remove(File);
	}

	public void ToggleTagVisible()
	{
		TagVisible = !
		TagVisible;
	}

	public void ToggleReminderVisible()
	{
		ReminderVisible = !
		ReminderVisible;
	}

	public void ToggleAssignVisible()
	{
		AssignVisible = !
		AssignVisible;
	}

	public void ToggleSectionVisible()
	{
		SectionVisible = !
		SectionVisible;
	}

	public Action RemoveSubtask(Subtask subtask)
	{
		return () =>
		{
			Subtasks.Remove(subtask);
		};
	}

	public void AddSubtask(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" && NewSubTask != string.Empty)
		{
			Subtasks.Add(new Subtask() { Name = NewSubTask });
			NewSubTask = string.Empty;
		}
	}

	public void DeleteTask()
	{

	}


	public Func<Task> DeleteAttachment(string attachment)
	{
		return async () =>
		{

		};
	}

	public void Dispose()
	{

	}
}
