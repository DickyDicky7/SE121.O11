@implements IDisposable
@inject Supabase.Client SupabaseClient
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService

<Animate style="width:100%;height:100%;"
		 Animation="Animations.FadeDown"
		 Duration="TimeSpan.FromSeconds(0.5)">
	<MudPaper @attributes=AdditionalAttributes
			  Class="d-flex flex-column gap-2 pa-2 align-center border-2"
			  Style="border-radius:20px;overflow:hidden;"
			  Elevation="10"
			  Width="500px"
			  Height="80vh">
		<MudPaper Class="d-flex flex-row align-center"
				  Elevation="0"
				  Width="100%">
			<MudText Style="font-size:large;font-weight:bold;">
				@(@$"Task ""{Task.Name}"" 's Chat")
			</MudText>
		</MudPaper>
		<MudPaper Class="d-flex flex-column-reverse gap-2"
				  Style="overflow-y:auto;"
				  Elevation="0"
				  Width ="100%"
				  Height="100%">
			<Virtualize Context="taskComment"
						Items="TaskComments.Reverse<TaskComment>().ToList()"
						TItem="TaskComment" OverscanCount="10">
				@if (BelongToCurrentUser(taskComment))
				{
					<MudPaper @key=@(taskComment.Comment.Id)
							  Class="pa-2 mud-theme-info"
							  Style="border-radius:10px;align-self:end;"
							  Elevation="0"
							  MaxWidth="75%">
						<MudTooltip Arrow="true"
									Color="Color.Dark"
									Placement="Placement.Start"
									Text=@($"Sent at {taskComment.Comment.CreatedTimeStamp:HH:mm, dd-MM-yyyy}")>
							<MudText Style="">
								@taskComment.Comment.Message
							</MudText>
						</MudTooltip>
					</MudPaper>
				}
				else
				{
					<MudPaper @key=@(taskComment.Comment.Id)
							  Class="d-flex flex-row gap-2"
							  Style="align-self:start;"
							  Elevation="0"
							  MaxWidth="75%">
						<MudTooltip Arrow="true"
									Color="Color.Dark"
									Placement="Placement.Start"
									Text = "@taskComment.Comment.Profile.Email">
							<MudAvatar Color="Color.Primary" Variant="Variant.Filled">
								@if (string.IsNullOrWhiteSpace(taskComment
                                   .Comment.Profile.AvatarURL))
								{
								@(taskComment
                                   .Comment.Profile.Email[0].ToString()
                                           .ToUpper())
								}
								else
								{
									<MudImage Src=@(
                                  taskComment
                                   .Comment.Profile.AvatarURL) />
								}
							</MudAvatar>
						</MudTooltip>
						<MudPaper Class="pa-2 mud-theme-warning"
								  Style="border-radius:10px;"
								  Elevation=0
								  MaxWidth="100%">
							<MudTooltip Arrow="true"
										Color="Color.Dark"
										Placement="Placement.End"
										Text=@($"Sent at {taskComment.Comment.CreatedTimeStamp:HH:mm, dd-MM-yyyy}")>
								<MudText Style="">
									@taskComment.Comment.Message
								</MudText>
							</MudTooltip>
						</MudPaper>
					</MudPaper>
				}
			</Virtualize>
		</MudPaper>
		<MudPaper Class="d-flex flex-row"
				  Elevation="0"
				  Width="100%">
			<MudTextField @bind-Value=@(NewMessage)
						  Immediate=true
						  FullWidth=true
						  Placeholder="Enter message"
						  DisableUnderLine=true
						  Variant="Variant.Outlined"
						  Margin="Margin.Dense"
						  TextUpdateSuppression=false
						  OnKeyDown="CreateNewMessageOnKeyDown"/>
			<MudIconButton Icon="@Icons.Material.Filled.Send"
						   Color="Color.Info"
						   OnClick="CreateNewMessage" />
		</MudPaper>
	</MudPaper>
</Animate>

@code
{
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }

	[Parameter]
	public Models.Task  Task  { get; set; } = null!;
	[CascadingParameter(Name = nameof(CurrentUserId))]
	public Guid CurrentUserId { get; set; }

	public string  NewMessage { get; set; } = string.Empty;
	public bool BelongToCurrentUser(TaskComment taskComment)
	=> taskComment.Comment != null
	&& taskComment.Comment.ProfileId 
	== CurrentUserId;
	public List<TaskComment> TaskComments { get; set; } = new();

	public record class TaskComment
	{
		public Models.Comment Comment { get; set; } = null!;
	}

	public async Task MapCommentModelsToTaskCommentRecords()
	{
		   TaskComments.Clear();
		foreach (Models.Comment comment in SupabaseImplementModelStateProviderService.Comments.Where(
		comment =>
		comment.TaskId == Task.Id).OrderBy(
		comment =>
		comment.CreatedTimeStamp))
		{
			TaskComments.Add(new()
			{
				Comment = comment,
			});
		}
		await System.Threading.Tasks.Task.CompletedTask;
	}

	public async Task CreateNewMessageOnKeyDown(KeyboardEventArgs keyboardEventArgs)
	{
		if (keyboardEventArgs.Code == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
		{
		   await      CreateNewMessage();
		}
	}

	public async Task CreateNewMessage()
	{
		try
		{
			Models.Comment newComment = new()
			{
				Message = NewMessage,
				   TaskId = Task.Id ,
				ProfileId = CurrentUserId,
			};
			await SupabaseClient.From<Models.Comment>().Insert(
			newComment, new Postgrest.QueryOptions()
			{Returning    = Postgrest.QueryOptions.ReturnType.Minimal, });
			NewMessage    =    string.Empty;
		}
		catch (Postgrest.Exceptions.PostgrestException postgrestException)
		{
			System
			.Diagnostics.Debug.WriteLine(
			postgrestException.Message);
		}
	}

	public void OnChangedComments()
	{
		InvokeAsync(async () =>
		{
			await MapCommentModelsToTaskCommentRecords();
			StateHasChanged();
		});
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		await MapCommentModelsToTaskCommentRecords();
		SupabaseImplementModelStateProviderService.ChangedComments += OnChangedComments;
	}

	public void Dispose()
	{
		SupabaseImplementModelStateProviderService.ChangedComments -= OnChangedComments;
	}
}
