@inject ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@inject Services.Implementations.SupabaseAuthenticationStateProviderService SupabaseAuthenticationStateProviderService
<MudPaper Class="d-flex flex-column gap-2"
          Elevation="0"
          Width="100%">

    @*Infomation*@
    <MudPaper Class="d-flex flex-column gap-2 align-center"
              Elevation="0"
              Width="100%">
        <MudFileUpload FilesChanged="FileChanged"
                       T="IBrowserFile"
                       Accept=".png, .jpg">
            <ButtonTemplate>
                <MudButton Style="padding:0;"
                           HtmlTag="label"
                           for="@context">
                    @if (CurrentUserProfile != null)
                    {
                        <MudAvatar Size="Size.Large" Color="Color.Primary" Variant="Variant.Filled">

                            @if (string.IsNullOrWhiteSpace(CurrentUserProfile.AvatarURL))
                            {
                                @(CurrentUserProfile.Email[0].ToString().ToUpper())

                            }
                            else
                            {
                                <MudImage Src=@(CurrentUserProfile.AvatarURL) />
                            }
                        </MudAvatar>
                    }
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <MudText Style="font-size:larger;font-weight:bold">
            @if (CurrentUserProfile != null)
            {
                @(CurrentUserProfile.Email.Split('@').First())
            }
            else
            {
                @("User")
            }
        </MudText>
        <MudText Style="font-size:medium;font-weight:100">
            @if (CurrentUserProfile != null)
            {
                @(CurrentUserProfile.Email)
            }
            else
            {
                @("User email")
            }
        </MudText>
    </MudPaper>
    @*List of content*@
    <MudPaper Class="d-flex flex-column"
              Elevation="0"
              Width="100%">
        @foreach (ChildContent Content in ChildContentList)
        {
            <MudButton FullWidth="true"
                       OnClick="()=>UpdateParentState(Content.State)">
                <MudPaper Class="d-flex flex-row align-cneter justify-space-between"
                          Elevation="0"
                          Width="100%">
                    <MudText>
                        @Content.Name
                    </MudText>
                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight"
                             Size="Size.Small" />
                </MudPaper>
            </MudButton>
        }
        <MudButton FullWidth="true"
                   OnClick=@(async () => await SupabaseAuthenticationStateProviderService.LogOut(Snackbar))>
            <MudPaper Class="d-flex flex-row align-cneter justify-space-between"
                      Elevation="0"
                      Width="100%">
                <MudText>
                    Sign Out
                </MudText>
                <MudIcon Icon="@Icons.Material.Filled.Logout"
                         Size="Size.Small"
                         Color="Color.Error" />
            </MudPaper>
        </MudButton>
    </MudPaper>
</MudPaper>

@code {
    [Parameter]
    public double ParentState { get; set; }
    [Parameter]
    public EventCallback<double> ParentStateChanged { get; set; }
    [CascadingParameter(Name = nameof(CurrentUserProfile))]
    public Models.Profile CurrentUserProfile { get; set; } = null!;
    [CascadingParameter(Name = nameof(CurrentUserId))]
    public Guid CurrentUserId { get; set; }

    public string Name { get; set; } = "Master";
    public string Email { get; set; } = "ExampleEmail@gmail.com";
    public IBrowserFile AvatarFile { get; set; } = null!;

    public record ChildContent
    {
        public double State { get; set; } = default!;
        public string Name { get; set; } = default!;
    }
    public List<ChildContent> ChildContentList { get; set; } = new();

    public async Task UpdateParentState(double _NewParentState)
    {
        ParentState = _NewParentState;
        await ParentStateChanged.InvokeAsync(ParentState);
    }
    public async Task FileChanged(IBrowserFile file)
    {
        using (Stream upstream = file.OpenReadStream())
        {
            byte[] buffers = new byte[file.Size];
            await upstream.ReadAsync(buffers);
            string filePath = @$"{CurrentUserId}/avatar.{file.Name.Split('.').Last()}";
            await SupabaseClient.Storage.From("avatars")
            .Upload(
                buffers,
                filePath,
                new Supabase.Storage.FileOptions()
                    {
                        ContentType = file.ContentType,
                        Upsert = true
                    },
                inferContentType: true,
                onProgress: (sender, progress) =>
                    {

                    }
            );
            string newAvatarUrl = await SupabaseClient.Storage.From("avatars").CreateSignedUrl(filePath, 86400 * 365 * 68);
            await SupabaseClient.From<Models.Profile>()
            .Where(profile => profile.Id == CurrentUserId)
            .Set(profile => profile.AvatarURL, newAvatarUrl)
            .Update();
        }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChildContentList.Add(new ChildContent()
            {
                State = 1.1,
                Name = "Reset Password",
            }
        );
        ChildContentList.Add(new ChildContent()
            {
                State = 1.2,
                Name = "Delete Account",
            }
        );
    }
}
