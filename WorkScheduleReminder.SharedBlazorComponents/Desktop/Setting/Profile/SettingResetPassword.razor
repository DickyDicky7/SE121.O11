@using WorkScheduleReminder.SharedBlazorComponents.Services.Implementations

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject SupabaseAuthenticationStateProviderService SupabaseAuthenticationStateProviderService

<MudPaper Class="d-flex flex-column gap-2"
		  Elevation="0"
		  Width="100%">
	<MudTextField @bind-Value="NewPassword"
				  Class="rounded-pill"
				  Placeholder="Enter new password"
				  Immediate="true"
				  DisableUnderLine="true"
				  FullWidth="true"
				  Variant="Variant.Outlined"
				  Margin="Margin.Dense"
				  InputType="NewPasswordInputType"
				  Adornment="Adornment.End"
				  AdornmentIcon="@NewPasswordInputIcon"
				  AdornmentAriaLabel="Show New Password"
				  OnAdornmentClick="OnNewPasswordInputAdornmentClick" />
	<MudTextField @bind-Value="NewPasswordConfirmed"
				  Class="rounded-pill"
				  Placeholder="Confirm new password"
				  Immediate="true"
				  DisableUnderLine="true"
				  FullWidth="true"
				  Variant="Variant.Outlined"
				  Margin="Margin.Dense"
				  InputType="NewPasswordConfirmedInputType"
				  Adornment="Adornment.End"
				  AdornmentIcon="@NewPasswordConfirmedInputIcon"
				  AdornmentAriaLabel="Show New Confirmed Password"
				  OnAdornmentClick="OnNewPasswordConfirmedInputAdornmentClick" />
	<MudButton Class="d-flex flex-wrap rounded-pill"
			   Size="Size.Medium"
			   FullWidth="true"
			   Variant=Variant.Outlined
			   OnClick="OnConfirmResetPasswordButtonClick">
		<MudText>
			Confirm reset password
		</MudText>
	</MudButton>
</MudPaper>

@code {

	public string NewPassword { get; set; } = string.Empty;
	public string NewPasswordConfirmed { get; set; } = string.Empty;
	public string NewPasswordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
	public bool NewPasswordInputShow { get; set; } = false;
	public InputType NewPasswordInputType { get; set; } = InputType.Password;
	public string NewPasswordConfirmedInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
	public bool NewPasswordConfirmedInputShow { get; set; } = false;
	public InputType NewPasswordConfirmedInputType { get; set; } = InputType.Password;

	public void OnNewPasswordInputAdornmentClick()
	{
		NewPasswordInputShow = !
		NewPasswordInputShow;
		if (NewPasswordInputShow)
		{
			NewPasswordInputType = InputType.Text;
			NewPasswordInputIcon = Icons.Material.Filled.Visibility;
		}
		else
		{
			NewPasswordInputType = InputType.Password;
			NewPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
		}
	}

	public void OnNewPasswordConfirmedInputAdornmentClick()
	{
		NewPasswordConfirmedInputShow = !
		NewPasswordConfirmedInputShow;
		if (NewPasswordConfirmedInputShow)
		{
			NewPasswordConfirmedInputType = InputType.Text;
			NewPasswordConfirmedInputIcon = Icons.Material.Filled.Visibility;
		}
		else
		{
			NewPasswordConfirmedInputType = InputType.Password;
			NewPasswordConfirmedInputIcon = Icons.Material.Filled.VisibilityOff;
		}
	}

	public async Task OnConfirmResetPasswordButtonClick()
	{
		await SupabaseAuthenticationStateProviderService
	.ResetPassword(
					NewPassword,
					NewPasswordConfirmed, Snackbar);
	}
}
