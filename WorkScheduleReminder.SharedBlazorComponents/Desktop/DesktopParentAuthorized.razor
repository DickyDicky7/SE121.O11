@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopUpAndSubMenus
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.MainContent
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.StaticComponents

<MudLayout>
	<MudPaper Class="@($"d-flex flex-row {Theme}")"
			  Elevation="0"
			  Width="100vw" Height="100vh">
		@* Sidebar *@
		<DesktopBarSide @bind-ActiveViewName="ActiveViewName"
		                @bind-ActiveViewIcon="ActiveViewIcon"
		                @bind-ActiveViewType="ActiveViewType"
		                @bind-ActiveBoard_____Id="ActiveBoard_____Id"
		                @bind-ActiveCustomViewId="ActiveCustomViewId" />
		@*Top bar & mainscreen*@
		<MudPaper Class="d-flex flex-column"
				  Style="background-color:transparent;overflow:hidden;"
				  Elevation="0"
				  Width="100%" Height="100%">
			@* Topbar *@
			<DesktopBarTop ActiveViewName="@ActiveViewName"
						   ActiveViewIcon="@ActiveViewIcon"
						   ActiveViewType="@ActiveViewType"
						   ActiveBoard_____Id="@ActiveBoard_____Id"
						   ActiveCustomViewId="@ActiveCustomViewId" />
			@*MainScreen*@
			@MainChildContent
		</MudPaper>
	</MudPaper>
</MudLayout>

@code
{

	[Parameter]
	public RenderFragment MainChildContent { get; set; } = null!;

	public string ActiveViewName { get; set; } = string.Empty;
	public string ActiveViewIcon { get; set; } = string.Empty;
	public Guid ActiveBoard_____Id { get; set; }
	public Guid ActiveCustomViewId { get; set; }
	public Helper.ViewType ActiveViewType { get; set; }
	public string Theme { get; set; } = "mud-theme-info";

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (ActiveViewType == Helper.ViewType.MyDayView)
		{
			Theme = string.Empty;
		}
		else
		{
			Theme = "mud-theme-info";
		}
	}

}
