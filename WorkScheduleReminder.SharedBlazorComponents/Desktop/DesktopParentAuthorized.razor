@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.MainContent
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.StaticComponents

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inject Supabase.Client SupabaseClient

<CascadingValue Name=@(nameof(CurrentUserProfile)) Value="CurrentUserProfile" TValue="Models.Profile" IsFixed="true">
<CascadingValue Name=@(nameof(CurrentUserId )) Value="CurrentUserId " TValue="Guid  " IsFixed="true">
<CascadingValue Name=@(nameof(ActiveViewName)) Value="ActiveViewName" TValue="string">
<CascadingValue Name=@(nameof(ActiveViewIcon)) Value="ActiveViewIcon" TValue="string">
<CascadingValue Name=@(nameof(ActiveViewType))      Value="ActiveViewType     " TValue="Helper.ViewType     ">
<CascadingValue Name=@(nameof(ActiveViewTypeBoard)) Value="ActiveViewTypeBoard" TValue="Helper.ViewTypeBoard">
<CascadingValue Name=@(nameof(ActiveBoard_____)) Value="ActiveBoard_____" TValue="Models.Board     ">
<CascadingValue Name=@(nameof(ActiveCustomView)) Value="ActiveCustomView" TValue="Models.CustomView">
<CascadingValue Name=@(nameof(TagByBoard__IdsToFilter)) Value="TagByBoard__IdsToFilter" TValue="List<Guid>">
<CascadingValue Name=@(nameof(TagByProfileIdsToFilter)) Value="TagByProfileIdsToFilter" TValue="List<Guid>">
<CascadingValue Name=@(nameof(IsIndividualToWorkspace)) Value="IsIndividualToWorkspace" TValue="bool">
<CascadingValue Name=@(nameof( AssigneeIdsToFilter)) Value=" AssigneeIdsToFilter" TValue="List<Guid>">
<CascadingValue Name=@(nameof(DueDateRangeToFilter)) Value="DueDateRangeToFilter" TValue="DateRange ">
<MudLayout>
	<MudPaper Class="@($"d-flex flex-row {Theme}")"
			  Elevation="0"
			  Width="100vw" Height="100vh">
		@* Sidebar *@
		<DesktopBarSide @bind-ActiveViewName="ActiveViewName"
		                @bind-ActiveViewIcon="ActiveViewIcon"
		                @bind-ActiveViewType="ActiveViewType"
		                @bind-ActiveBoard_____="ActiveBoard_____"
		                @bind-ActiveCustomView="ActiveCustomView"
		                CurrentThemeIdChanged=
		               "CurrentThemeIdChanged" />
		@*Top bar & mainscreen*@
		<MudPaper Class="d-flex flex-column"
				  Style="background-color:transparent;overflow:hidden;"
				  Elevation="0"
				  Width="100%" Height="100%">
			@* Topbar *@
			<DesktopBarTop @bind-IsIndividualToWorkspace=
                                "IsIndividualToWorkspace"
                           @bind-ActiveViewTypeBoard=
                                "ActiveViewTypeBoard"
                           @bind-TagByBoard__IdsToFilter=
                                "TagByBoard__IdsToFilter"
                           @bind-TagByProfileIdsToFilter=
                                "TagByProfileIdsToFilter"
                           @bind-AssigneeIdsToFilter=
                                "AssigneeIdsToFilter"
                           @bind-DueDateRangeToFilter=
                                "DueDateRangeToFilter"
                           IsDarkModeChanged=
                          "IsDarkModeChanged" />
			@* < MudMainContent> *@
				@*MainScreen*@
				@MainChildContent
			@* </MudMainContent> *@
		</MudPaper>
	</MudPaper>
</MudLayout>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>

@code
{

	[Parameter]
	public RenderFragment MainChildContent { get; set; } = null!;

	public Guid   CurrentUserId  { get; set; }
	public string ActiveViewName { get; set; } = string.Empty;
	public string ActiveViewIcon { get; set; } = string.Empty;
	public Helper.ViewType       ActiveViewType             { get; set; }
	public Helper.ViewTypeBoard  ActiveViewTypeBoard        { get; set; }
	public Models.Board      ActiveBoard_____ { get; set; } = null!;
	public Models.CustomView ActiveCustomView { get; set; } = null!;
	public bool   IsIndividualToWorkspace { get; set; }
	public string Theme { get; set; } = "mud-theme-info";
	public Models.Profile  CurrentUserProfile { get; set; } = null!;
	public List<Guid> TagByBoard__IdsToFilter { get; set; } = null!;
	public List<Guid> TagByProfileIdsToFilter { get; set; } = null!;
	public List<Guid>     AssigneeIdsToFilter { get; set; } = null!;
	public DateRange     DueDateRangeToFilter { get; set; } = null!;

	public static Guid LastActiveBoardId { get; set; }

	[Parameter]
	public               bool      IsDarkMode        { get; set; } = false;
	[Parameter]
	public EventCallback<bool>     IsDarkModeChanged { get; set; }
    [Parameter]
    public               byte  CurrentThemeId        { get; set; }
    [Parameter]
    public EventCallback<byte> CurrentThemeIdChanged { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		CurrentUserId = Guid.Parse(SupabaseClient.Auth.CurrentUser?.Id ?? string.Empty);
		CurrentUserProfile =(await SupabaseClient.From<Models.Profile>().Where(profile => profile.Id == CurrentUserId)
		.Single())!;
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (ActiveViewType == Helper.ViewType.MyDayView)
		{
			Theme = string.Empty;
		}
		else
		{
			Theme = "mud-theme-info";
		}
		if (ActiveBoard_____    != null
		&&  ActiveBoard_____.Id != LastActiveBoardId)
		{
			if (TagByBoard__IdsToFilter != null)
			{
				TagByBoard__IdsToFilter.Clear();
			}
			if (    AssigneeIdsToFilter != null)
			{
				AssigneeIdsToFilter.Clear();
			}
			if (   DueDateRangeToFilter != null)
			{
			       DueDateRangeToFilter.Start = null;
			       DueDateRangeToFilter.End   = null;
			}
			LastActiveBoardId =  ActiveBoard_____.Id;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		CurrentUserProfile =(await SupabaseClient.From<Models.Profile>().Where(profile => profile.Id == CurrentUserId)
		.Single())!;
		if (firstRender)
		{
			Common.PersonalSettings personalSettings = JsonConvert.DeserializeObject<
			Common.PersonalSettings>(CurrentUserProfile.PersonalSettings)!;
			      CurrentThemeId  = personalSettings   .   ThemeId ;
			await CurrentThemeIdChanged.InvokeAsync(CurrentThemeId);
		}
	}

}
