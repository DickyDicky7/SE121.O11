@page "/"
@page "/calendar"
<MudPaper Class="d-flex flex-column pa-2 gap-1"
          Style="background-color:transparent;overflow:hidden"
          Elevation="0"
          Width="100%"
          Height="100%">
    <MudPaper Class="d-flex flex-row align-center justify-space-between"
              Elevation="0"
              Width="100%">
        <MudPaper Class="d-flex flex-row align-center gap-2"
                  Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft"
                           OnClick="()=>ChangeMonth(-1)" />
            <MudText Style="font-weight:bold">
                @($"{ViewingMonth.ToString("MMM")} {ViewingMonth.ToString("yyyy")}")
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowRight"
                           OnClick="()=>ChangeMonth(1)" />
        </MudPaper>
        <MudPaper Class="d-flex flex-row align-center gap-2"
                  Elevation="0">
            <MudIconButton Size="Size.Small"
                           Icon="@Icons.Material.Filled.Add"
                           OnClick="AddTask" />
            <MudTextField @bind-Value=@NewTask
                          Placeholder="Enter task's name"
                          Immediate="true"
                          DisableUnderLine="true"
                          FullWidth="false"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Clearable="true"
                          TextUpdateSuppression="false"
                          OnKeyDown="(KeyboardEventArgs e)=>OnKeyDown(e)" />
            <MudSelect @bind-Value=ChoosingSection
                       T="string"
                       Label="Click to select section"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense"
                       Dense="true"
                       AnchorOrigin="Origin.BottomCenter"
                       TransformOrigin="Origin.TopCenter">
                @foreach (Section Section in SectionList)
                {
                    <MudSelectItem Value="Section.Name" />
                }
            </MudSelect>
        </MudPaper>
    </MudPaper>
    <MudPaper Class=""
              Style="display:grid;grid-template-columns:repeat(7,1fr);"
              Elevation="0"
              Width="100%">
        @foreach (string Day in DayOfWeek)
        {
            <MudPaper Class="d-flex flex-row align-center justify-content-center"
                      Elevation="0"
                      Width="100%">
                <MudText Style="font-size:larger;font-weight:bold">
                    @Day
                </MudText>
            </MudPaper>
        }
    </MudPaper>
    <MudPaper Class=""
              Style="@($"display:grid;grid-template:repeat({WeekCountInMonth},1fr)/repeat(7,1fr);grid-gap:1px;background-color:transparent;overflow:hidden")"
              Elevation="3"
              Width="100%"
              Height="100%">
        @foreach (int i in Enumerable.Range(1, DaysOfPreviousMonthInFirstWeek))
        {
            <MudPaper Class="d-flex flex-row align-center justify-content-center"
                      Elevation="3"
                      Width="100%"
                      Height="100%">
                <MudText>
                    @PreviousMonth
                </MudText>
            </MudPaper>
        }
        @foreach (int i in Enumerable.Range(1, MonthEnd.Day))
        {
            <MudPaper Class="d-flex flex-column"
                      Style="overflow:hidden"
                      Elevation="3"
                      Width="100%"
                      Height="100%">
                <MudText Class="@((i==DateTime.Today.Day)?"mud-theme-info":"")"
                         Style="border-radius:10px"
                         Align="Align.Center">
                    @i
                </MudText>
                <MudPaper Class="d-flex flex-column"
                          Style="overflow:scroll"
                          Elevation="0"
                          Width="100%"
                          Height="100%">
                    @foreach (Task Task in TaskList)
                    {
                        if (DateComparer(Task.DueDay, i))
                        {
                            <MudTooltip Text="@Task.Section">
                                <MudButton Class="d-flex flex-row align-center justify-content-start"
                                           Size="Size.Small"
                                           FullWidth="true"
                                           OnClick="()=>{}">
                                    <MudText>
                                        @Task.Title
                                    </MudText>
                                </MudButton>
                            </MudTooltip>
                        }
                    }
                </MudPaper>
            </MudPaper>
        }
        @foreach (int i in Enumerable.Range(1, DaysOfNextMonthInLastWeek))
        {
            <MudPaper Class="d-flex flex-row align-center justify-content-center"
                      Elevation="3"
                      Width="100%"
                      Height="100%">
                <MudText>
                    @NextMonth
                </MudText>
            </MudPaper>
        }
    </MudPaper>
</MudPaper>

@code
{
    public DateTime ViewingMonth { get; set; } = DateTime.Now;
    public int DaysOfPreviousMonthInFirstWeek { get; set; }
    public int DaysOfNextMonthInLastWeek { get; set; }
    public DateTime MonthStart { get; set; }
    public DateTime MonthEnd { get; set; }
    public string PreviousMonth { get; set; } = string.Empty;
    public string NextMonth { get; set; } = string.Empty;
    public int WeekCountInMonth { get; set; }
    public List<string> DayOfWeek { get; set; } = new List<string>()
    { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    public string NewTask { get; set; } = string.Empty;
    public string ChoosingSection { get; set; } = string.Empty;
    public record Task
    {
        public string Title { get; set; } = default!;
        public DateTime DueDay { get; set; } = default;
        public TimeSpan DueTime { get; set; } = default;
        public string Section { get; set; } = default!;
    }
    public List<Task> TaskList { get; set; } = new();
    public record Section
    {
        public string Name { get; set; } = default!;
    }
    public List<Section> SectionList { get; set; } = new();
    public bool DateComparer(DateTime _DateToCompare, int DayOfMonth)
    {
        return _DateToCompare.Day == DayOfMonth
        && _DateToCompare.Month == ViewingMonth.Month
        && _DateToCompare.Year == ViewingMonth.Year;
    }
    public void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            AddTask();
        }
    }
    public void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(NewTask) && !string.IsNullOrWhiteSpace(ChoosingSection))
        {
            TaskList.Add(
            new Task()
                {
                    Title = NewTask,
                    DueTime = new(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second),
                    DueDay = DateTime.Now,
                    Section = ChoosingSection
                }
        );
            NewTask = string.Empty;
        }
    }
    public void ChangeMonth(int _Value)
    {
        ViewingMonth = ViewingMonth.AddMonths(_Value);
        MonthStart = new DateTime(ViewingMonth.Year, ViewingMonth.Month, 1);
        MonthEnd = MonthStart.AddMonths(1).AddDays(-1);
        DaysOfPreviousMonthInFirstWeek = (int)MonthStart.DayOfWeek;
        DaysOfNextMonthInLastWeek = 6 - (int)MonthEnd.DayOfWeek;
        PreviousMonth = $"{ViewingMonth.AddMonths(-1).ToString("MMM")} {ViewingMonth.AddMonths(-1).ToString("yyyy")}";
        NextMonth = $"{ViewingMonth.AddMonths(1).ToString("MMM")} {ViewingMonth.AddMonths(1).ToString("yyyy")}";
        WeekCountInMonth =
            (MonthEnd.Day
            + DaysOfNextMonthInLastWeek
            + DaysOfPreviousMonthInFirstWeek) / 7;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChangeMonth(0);
        foreach (int i in Enumerable.Range(1, MonthEnd.Day))
        {
            if (i % 2 == 0)
                continue;
            foreach (int j in Enumerable.Range(1, 4))
            {
                Random rand = new Random();
                TaskList.Add(
                    new Task()
                        {
                            Title = $"Task {i}.{j}",
                            DueDay = new DateTime(ViewingMonth.Year, ViewingMonth.Month, i),
                            Section = $"Section{rand.Next(1, 10)}"
                        }
                );
            }
        }
        foreach (int i in Enumerable.Range(1, 10))
        {
            SectionList.Add(new Section() { Name = $"Section{i}" });
        }
    }
}