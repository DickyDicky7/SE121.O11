@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@page "/table"
@implements IDisposable
@inject Supabase.Client SupabaseClient
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService

<MudPaper Class="d-flex flex-column gap-2 pa-2"
		  Style="background-color:transparent;overflow:hidden;"
		  Elevation="0"
		  Width="100%"
		  Height="100%">
	<MudPaper Class="d-flex flex-row gap-2 align-center justify-space-between"
			  Style="padding:3px 0px;"
			  Elevation="10"
			  Width="100%">
		<MudSwitch @bind-Checked="@ColumnPropertiesList[0].Visible"
				   Size="Size.Small"
				   Label="@ColumnPropertiesList[0].Name"
				   Color="Color.Success" />
		<MudSwitch @bind-Checked="@ColumnPropertiesList[1].Visible"
				   Size="Size.Small"
				   Label="@ColumnPropertiesList[1].Name"
				   Color="Color.Success" />
		<MudSwitch @bind-Checked="@ColumnPropertiesList[2].Visible"
				   Size="Size.Small"
				   Label="@ColumnPropertiesList[2].Name"
				   Color="Color.Success" />
		<MudSwitch @bind-Checked="@ColumnPropertiesList[3].Visible"
				   Size="Size.Small"
				   Label="@ColumnPropertiesList[3].Name"
				   Color="Color.Success" />
		<MudSwitch @bind-Checked="@ColumnPropertiesList[4].Visible"
				   Size="Size.Small"
				   Label="@ColumnPropertiesList[4].Name"
				   Color="Color.Success" />
	</MudPaper>
	<MudPaper Class="d-flex flex-column gap-2"
			  Style="background-color:transparent;overflow:scroll;"
			  Elevation="0"
			  Width="100%"
			  Height="100%">
		<Virtualize Context="section" Items="Sections">
			<MudPaper @key=@(section.SectionByBoard.Id)
					  Class="d-flex flex-row align-center justify-space-between"
					  Style="position:relative;"
					  Elevation="10"
					  Width="100%">
				<MudPaper Class="d-flex flex-row align-center"
						  Elevation="0">
					<MudToggleIconButton @bind-Toggled=@(section.Hidden)
										 Size="Size.Small"
										 ToggledSize="Size.Small"
										 Icon="@Icons.Material.Filled.Visibility"
										 ToggledIcon="@Icons.Material.Filled.VisibilityOff"
										 Color="Color.Info"
										 ToggledColor="Color.Default" />
					<MudText>
						@(section.Name)
					</MudText>
				</MudPaper>
				<MudPaper Class="d-flex flex-row align-center"
						  Elevation="0">
					<MudTextField @bind-Value=@(section.NewTask)
								  Style="margin:5px 0px;"
								  T="string"
								  Placeholder="@($@"Add task to ""{section.Name}""")"
								  Immediate="true"
								  DisableUnderLine="true"
								  FullWidth="false"
								  Variant="Variant.Outlined"
								  Margin="Margin.Dense"
								  Clearable="true"
								  TextUpdateSuppression="false"
								  OnKeyDown=@(InsertTaskToSection(section)) />
					<MudIconButton Icon="@Icons.Material.Filled.MoreVert"
								   Size="Size.Small" />
				</MudPaper>
			</MudPaper>
			<MudDataGrid @bind-SelectedItem=@(SelectedSectionTask)
						 Style="" hidden=@(section.Hidden)
						 T="Common.SectionTask"
						 Items="section.SectionTasks"
						 FixedHeader="true"
						 Virtualize="true"
						 Elevation="10"
						 ColumnResizeMode="ResizeMode.Column"
						 SortMode="SortMode.None"
						 RowClick="SectionTaskOnClick">
				<Columns>
					@*Title*@
					<TemplateColumn Hidden="@(!ColumnPropertiesList[0].Visible)" Title="@ColumnPropertiesList[0].Name">
						<CellTemplate>
							<MudPaper Class="d-flex flex-row align-center jutify-content-start"
									  Elevation="0"
									  Width="100%"
									  Height="50px">
								<MudText>
									@context.Item.Task.Name
								</MudText>
							</MudPaper>
						</CellTemplate>
					</TemplateColumn>
					@*Tags*@
					<TemplateColumn Hidden="@(!ColumnPropertiesList[1].Visible)" Title="@ColumnPropertiesList[1].Name">
						<CellTemplate>
							<MudPaper Class="align-center justify-content-start"
									  Style="overflow:scroll;display:grid;grid-template-columns:repeat(3,1fr);grid-gap:2px;"
									  Elevation="0"
									  Width="100%"
									  Height="50px">
								<Virtualize Context="tag" Items="context.Item.Tags">
									<MudChip @key=@(tag.Id)
											 Text=@(tag.Name)
											 Size="Size.Small"
											 Color="tag.Color"
											 Variant="Variant.Text" />
								</Virtualize>
							</MudPaper>
						</CellTemplate>
					</TemplateColumn>
					@*Assignees*@
					<TemplateColumn Hidden="@(!ColumnPropertiesList[2].Visible)" Title="@ColumnPropertiesList[2].Name">
						<CellTemplate>
							<MudPaper Class="align-center justify-content-start"
									  Style="position:relative;"
									  Elevation="0"
									  Width="100%"
									  Height="50px">
								<MudAvatarGroup Spacing="0"
												Max="3"
												MaxColor="Color.Dark">
									@foreach (Models.Profile assignee in context.Item.Assignees)
									{
										<MudTooltip @key=@(assignee.Id)
													Text="@assignee.Email"
													Arrow="true"
													Color="Color.Dark">
											<MudAvatar Color="Color.Primary" Size="Size.Medium"
													   Variant="Variant.Filled">
												@if (string.IsNullOrWhiteSpace(assignee.AvatarURL))
												{
													@(assignee.Email[0].ToString().ToUpper())
												}
												else
												{
													<MudImage Src="@assignee.AvatarURL" />
												}
											</MudAvatar>
										</MudTooltip>
									}
								</MudAvatarGroup>
							</MudPaper>
						</CellTemplate>
					</TemplateColumn>
					@*Due date & time*@
					<TemplateColumn Hidden="@(!ColumnPropertiesList[3].Visible)" Title="@ColumnPropertiesList[3].Name">
						<CellTemplate>
							<MudPaper Class="d-flex flex-row align-center justify-content-start"
									  Elevation="0"
									  Width="100%"
									  Height="50px">
								<MudText>
									@(DueDateDueTimeStringAssemble(
										context.Item.Task.DueDate,
										context.Item.Task.DueTime))
								</MudText>
							</MudPaper>
						</CellTemplate>
					</TemplateColumn>
					@*Attachments*@
					<TemplateColumn Hidden="@(!ColumnPropertiesList[4].Visible)" Title="@ColumnPropertiesList[4].Name">
						<CellTemplate>
							<MudPaper Class="d-flex flex-row align-center justify-content-start"
									  Elevation="0"
									  Width="100%"
									  Height="50px">

							</MudPaper>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
				<NoRecordsContent>
					<MudText>There's nothing here :(</MudText>
				</NoRecordsContent>
				<LoadingContent>
					<MudText>Loading...</MudText>
				</LoadingContent>
			</MudDataGrid>
		</Virtualize>
	</MudPaper>
</MudPaper>
<MudOverlay Visible="@PopupMenuTaskDetailVisible"
			ZIndex="10"
			DarkBackground="true"
			AutoClose="true"
			OnClick="TogglePopupMenuTaskDetailVisible">
	<PopupMenuTaskDetail @onclick:stopPropagation
						 Task=@(SelectedSectionTask.Task)
						 TogglePopupMenuTaskDetailVisible="TogglePopupMenuTaskDetailVisible" />
</MudOverlay>

@code
{
	[CascadingParameter(Name = nameof(ActiveBoard_____))]
	public Models.Board ActiveBoard_____ { get; set; } = null!;
	[CascadingParameter(Name = nameof(TagByBoard__IdsToFilter))]
	public List<Guid> TagByBoard__IdsToFilter { get; set; } = null!;
	[CascadingParameter(Name = nameof(    AssigneeIdsToFilter))]
	public List<Guid>     AssigneeIdsToFilter { get; set; } = null!;
	[CascadingParameter(Name = nameof(   DueDateRangeToFilter))]
	public DateRange     DueDateRangeToFilter { get; set; } = null!;

	public record class ColumnProperties
	{
		public bool Visible { get; set; } = true;
		public string  Name { get; set; } = string.Empty;
	}

	public record class Section     : Common.Section
	{
		public bool Hidden { get; set; } = false;
	}

	public record class SectionTask : Common.SectionTask
	{
		public IList<IBrowserFile> FileList { get; set; } = new List<IBrowserFile>();
	}

	public List<Section> Sections { get; set; } = new();
	public bool        PopupMenuTaskDetailVisible { get; set; } = false;
	public Common.SectionTask SelectedSectionTask { get; set; } = null!;
	public List<ColumnProperties> ColumnPropertiesList { get; set; } = new();

	public async Task MapSectionsByBoardsToSections()
	{
		Sections.Clear();
		foreach(Models.SectionByBoard sectionByBoard in
		SupabaseImplementModelStateProviderService.Section___ByBoards.Where(
		sectionByBoard => 
		sectionByBoard.BoardId == ActiveBoard_____.Id)
		 .OrderBy(sectionByBoard => sectionByBoard.CreatedTimeStamp)
		 . ThenBy(sectionByBoard => sectionByBoard.Name))
		{
			Sections.Add(new()
			{
				Name = sectionByBoard.Name,
				IsSectionByBoard = true ,
				  SectionByBoard = sectionByBoard,
				  SectionTasks   = new(),
			});
		}

		IEnumerable<Models.Member> members = SupabaseImplementModelStateProviderService.Member_s
		.  Where(member => member.BoardId == ActiveBoard_____.Id);
		
		foreach (Models.SectioningByBoard sectioningByBoard in SupabaseImplementModelStateProviderService.SectioningByBoards
		.Where(sectioningByBoard => sectioningByBoard.SectionByBoard.BoardId == ActiveBoard_____.Id))
		{
			Common.Section section = Sections.First(
			section => section.SectionByBoard.Id == sectioningByBoard
			.SectionByBoardId);

			List<Guid> assigneeIds = JsonConvert.DeserializeObject<List<Guid>>(sectioningByBoard.Task.Assignees)!;
			IEnumerable<Models.Profile> assignees = members.Where(
			member =>  assigneeIds.Contains(member.ProfileId)).Select<Models.Member,
			            Models.Profile>(member =>   member .Profile);

			IEnumerable<Models.TaggingByBoard> taggingByBoards = SupabaseImplementModelStateProviderService.TaggingByBoard__s
			.Where(
			    taggingByBoard =>
			    taggingByBoard.TaskId ==
			 sectioningByBoard.TaskId);

			if (TagByBoard__IdsToFilter       == null
			||  TagByBoard__IdsToFilter.Count == 0
			||  taggingByBoards.Any
			(   taggingByBoard => TagByBoard__IdsToFilter.Contains(taggingByBoard.TagByBoardId)))
			if (    AssigneeIdsToFilter       == null
			||      AssigneeIdsToFilter.Count == 0
			||      assigneeIds.Any
			(       assigneeId =>     AssigneeIdsToFilter.Contains(assigneeId)))
			if (   DueDateRangeToFilter       == null
			||     DueDateRangeToFilter.Start == null
			||     DueDateRangeToFilter.End   == null
			|| (   DueDateRangeToFilter.Start != null
			&&     DueDateRangeToFilter.End   != null
			&& sectioningByBoard.Task.DueDate >= DateOnly.FromDateTime(DueDateRangeToFilter.Start.Value)
			&& sectioningByBoard.Task.DueDate <= DateOnly.FromDateTime(DueDateRangeToFilter.End  .Value)))
			section.SectionTasks.Add(new()
			{
				Task = sectioningByBoard.Task,
				Tags =    taggingByBoards
				.Select
				<Models.TaggingByBoard, Common.Tag>(taggingByBoard => new()
				{
					   Id = taggingByBoard.TagByBoard.  Id,
					Name  = taggingByBoard.TagByBoard.Name,
					Color = taggingByBoard.TagByBoard.ParseColor(),
				}).ToList(),
				Assignees = assignees.ToList(),
			});
		}
	}

	public string DueDateDueTimeStringAssemble(DateOnly dueDate, TimeOnly dueTime)
	{
		return $@"{dueDate:dd-MM-yyyy} {dueTime:HH:mm}";
	}

	public void TogglePopupMenuTaskDetailVisible()
	{
		PopupMenuTaskDetailVisible = !PopupMenuTaskDetailVisible;
	}

	public void SectionTaskOnClick()
	{
		TogglePopupMenuTaskDetailVisible();
	}

	public Func<KeyboardEventArgs, Task> InsertTaskToSection(Common.Section section)
	{
		return async (keyboardEventArgs) =>
		{
			try
			{
				if (keyboardEventArgs.Code == "Enter" && !string.IsNullOrWhiteSpace(section.NewTask))
				{
					if (section
						.IsSectionByBoard)
					{
						Models.Task newTask = new()
						{
							Name = section.NewTask,
							Done = false,
							Note =      string.Empty,
							Settings  = string.Empty,
							ReminderRecurringMode = Models.Task
							.PossibleReminderRecurringMode.Empty.ToString(),
							ReminderRecurringSettings = JsonConvert
							.SerializeObject(new Common.ReminderRecurringSettings()),
							Checklist = "[]",
							Assignees = "[]",
							DueDate = Helper.DefaultDueDate(section.DaysOffset),
							DueTime = Helper.DefaultDueTime(                  ),
							ReminderBeginDate = null,
							ReminderBeginTime = null,
							ReminderCeaseDate = null,
							ReminderCeaseTime = null,
							  BoardId = ActiveBoard_____.Id,
							ProfileId = null,
							Attachments = "[]",
						};
						newTask = (await SupabaseClient.From<Models.Task>().Insert(newTask, new Postgrest.QueryOptions()
							{ Returning = Postgrest.QueryOptions.ReturnType.Representation, })).Model!;
						section.NewTask = string.Empty;

						Models
						.SectioningByBoard newSectioningByBoard = new()
						{
							SectionByBoardId =section.SectionByBoard.Id,
							TaskId = newTask.Id,
						};
						await SupabaseClient.From<Models.SectioningByBoard>()
						.Insert(newSectioningByBoard,
						              new Postgrest.QueryOptions()
						    { Returning = Postgrest.QueryOptions.ReturnType.Minimal, });
					}
					else
					{
						// Models.Task newTask = new()
						// {
						// 	Name = section.NewTask,
						// 	Done = false,
						// 	Note =      string.Empty,
						// 	Settings  = string.Empty,
						// 	ReminderRecurringMode = Models.Task
						// 	.PossibleReminderRecurringMode.Empty.ToString(),
						// 	ReminderRecurringSettings = JsonConvert
						// 	.SerializeObject(new Common.ReminderRecurringSettings()),
						// 	Checklist = "[]",
						//  Assignees = "[]",
						// 	DueDate = Helper.DefaultDueDate(section.DaysOffset),
						// 	DueTime = Helper.DefaultDueTime(                  ),
						// 	ReminderBeginDate = null,
						// 	ReminderBeginTime = null,
						// 	ReminderCeaseDate = null,
						// 	ReminderCeaseTime = null,
						// 	  BoardId = null,
						// 	ProfileId = CurrentUserId,
						// 	Attachments = "[]",
						// };
						// await SupabaseClient.From<Models.Task>().Insert(newTask, new Postgrest.QueryOptions()
						// 	{ Returning = Postgrest.QueryOptions.ReturnType.Minimal, });
						// section.NewTask = string.Empty;
					}
				}
			}
			catch (Postgrest.Exceptions.PostgrestException postgrestException)
			{
				System
				.Diagnostics.Debug.WriteLine(postgrestException.Message);
			}
		};
	}

	public void OnChangedTask___s()
	{
		InvokeAsync(async () =>
		{
			await MapSectionsByBoardsToSections();
			StateHasChanged();
		});
	}
	public void OnChangedTaggingByBoard__s()
	{
		InvokeAsync(async () =>
		{
			await MapSectionsByBoardsToSections();
			StateHasChanged();
		});
	}
	public void OnChangedSection___ByBoards()
	{
		InvokeAsync(async () =>
		{
			await MapSectionsByBoardsToSections();
			StateHasChanged();
		});
	}
	public void OnChangedSectioningByBoards()
	{
		InvokeAsync(async () =>
		{
			await MapSectionsByBoardsToSections();
			StateHasChanged();
		});
	}


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		ColumnPropertiesList.Add(new ColumnProperties() { Name = "Title", });
		ColumnPropertiesList.Add(new ColumnProperties() { Name =        "Tags", });
		ColumnPropertiesList.Add(new ColumnProperties() { Name =   "Assignees", });
		ColumnPropertiesList.Add(new ColumnProperties() { Name =    "Due date", });
		ColumnPropertiesList.Add(new ColumnProperties() { Name = "Attachments", });
		SupabaseImplementModelStateProviderService.ChangedTask___s += OnChangedTask___s;
		SupabaseImplementModelStateProviderService.ChangedTaggingByBoard__s += OnChangedTaggingByBoard__s;
		SupabaseImplementModelStateProviderService.ChangedSection___ByBoards += OnChangedSection___ByBoards;
		SupabaseImplementModelStateProviderService.ChangedSectioningByBoards += OnChangedSectioningByBoards;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (LastActiveBoardId != ActiveBoard_____.Id   || firstRender)
		{
System.Diagnostics.Debug.WriteLine("HAHAHA");
			LastActiveBoardId  = ActiveBoard_____.Id;
			await MapSectionsByBoardsToSections();
		}
	}

	public static Guid LastActiveBoardId { get; set; }

	public void Dispose()
	{
		SupabaseImplementModelStateProviderService.ChangedTask___s -= OnChangedTask___s;
		SupabaseImplementModelStateProviderService.ChangedTaggingByBoard__s -= OnChangedTaggingByBoard__s;
		SupabaseImplementModelStateProviderService.ChangedSection___ByBoards -= OnChangedSection___ByBoards;
		SupabaseImplementModelStateProviderService.ChangedSectioningByBoards -= OnChangedSectioningByBoards;
	}
}
