@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.Setting

@implements IDisposable
@inject       ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@using  Supabase.Realtime
@using  Supabase.Realtime.Interfaces
@using  Supabase.Realtime.PostgresChanges
@inject NavigationManager NavigationManager
@inject Services.Implementations.SupabaseAuthenticationStateProviderService SupabaseAuthenticationStateProviderService
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService

<MudPaper Class="d-flex flex-column gap-2 pa-2 rounded-0"
		  Style="overflow-y:auto;margin:auto;"
		  Elevation="10"
		  Outlined="true"
		  Width="300px"
		  Height="100%">
	<MudButton Style="padding:0 0 0 0;"
			   Size="Size.Large"
			   FullWidth="true"
			   OnClick="ToggleSetting">
		<MudPaper Class="d-flex flex-row gap-2 align-center"
				  Elevation="0"
				  Width="100%">
			<MudAvatar Color="Color.Primary" Variant="Variant.Filled">
				@if
				(CurrentUserProfile !=   null)
				@if (string.IsNullOrWhiteSpace
				(CurrentUserProfile.AvatarURL))
				{
			   @(CurrentUserProfile.Email[0].ToString()
				.ToUpper())
				}
				else
				{
					<MudImage Src=@(CurrentUserProfile.AvatarURL) />
				}
			</MudAvatar>
			<MudText Style="font-size:large;word-break:break-all;"
					 Align="Align.Justify">
				@if (CurrentUserProfile != null)
				{
				@(   CurrentUserProfile.Email.Split('@').First())
				}
				else
				{
					
				}
			</MudText>
		</MudPaper>
	</MudButton>
	<MudPaper Class=""
			  Style=""
			  Elevation="0"
			  Width="100%"
			  Height="100%">
		<MudList Class=""
				 Dense="true"
				 DisableGutters="true"
				 DisablePadding="true">
			@*default views*@
			<MudButton Class="justify-start"
					   StartIcon="@Icons.Material.Filled.Today"
					   Size="Size.Medium"
					   FullWidth="true"
					   Href="myday"
					   OnClick="MyDayOnClick">
				<MudText Style="">My day</MudText>
			</MudButton>
			<MudButton Class="justify-start"
					   StartIcon="@Icons.Material.Filled.NextWeek"
					   Size="Size.Medium"
					   FullWidth="true"
					   Href="kanban/next-7-days"
					   OnClick="Next7DaysOnClick">
				<MudText Style="">Next 7 days</MudText>
			</MudButton>
			<MudButton Class="justify-start"
					   StartIcon="@Icons.Material.Filled.Task"
					   Size="Size.Medium"
					   FullWidth="true"
					   Href="kanban/all-my-tasks"
					   OnClick="AllMyTasksOnClick">
				<MudText Style="">All my tasks</MudText>
			</MudButton>
			@*custom views*@
			<MudListItem Class=""
						 Dense="true"
						 DisableGutters="true"
						 InitiallyExpanded="true">
				<ChildContent>
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class=" d-flex flex-row gap-2"
								  Elevation="0">
							<MudIcon Icon="@Icons.Material.Filled.DashboardCustomize"
									 Size="Size.Medium" />
							<MudText Style="font-weight:bolder;">
								Custom views
							</MudText>
						</MudPaper>
						<MudIconButton Icon="@Icons.Material.Filled.Add"
									   Size="Size.Small"
									   OnClick="TogglePopupMenuCreateCustomViewVisible" />
					</MudPaper>
				</ChildContent>
				<NestedList>
					@if (SupabaseImplementModelStateProviderService
					.FetchingCustomViews)
					{
						<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="60px" />
					}
					<Virtualize Context="customView" Items="SupabaseImplementModelStateProviderService.CustomViews">
						<MudButton @key="customView.Id"
								   Class="justify-start"
								   StartIcon="@Icons.Material.Filled.Today"
								   Size="Size.Medium"
								   FullWidth="true"
								   Href="test"
								   OnClick="@(CustomViewOnClick(customView))">
							<MudText Style="overflow:hidden;">
								@customView.Name
							</MudText>
						</MudButton>
					</Virtualize>
				</NestedList>
			</MudListItem>
			@*workspace*@
			<MudListItem Class=""
						 Dense="true"
						 DisableGutters="true"
						 InitiallyExpanded="true">
				<ChildContent>
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class="d-flex flex-row gap-2"
								  Elevation="0">
							<MudIcon Icon="@Icons.Material.Filled.Workspaces"
									 Size="Size.Medium" />
							<MudText Style="font-weight:bolder;">
								Workspaces
							</MudText>
						</MudPaper>
						<MudIconButton Icon="@Icons.Material.Filled.Add"
									   Size="Size.Small"
									   OnClick="TogglePopupMenuCreateBoard_____Visible" />
						@* <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
						Size="Size.Small"
						OnClick="ToggleInvite" /> *@
					</MudPaper>
				</ChildContent>
				<NestedList>
					@if (SupabaseImplementModelStateProviderService
					.FetchingBoard__s)
					{
						<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="60px" />
					}
					<Virtualize Context="board" Items="SupabaseImplementModelStateProviderService.Board__s">
						<MudButton @key="board.Id"
								   Class="justify-start"
								   Size="Size.Medium"
								   FullWidth="true"
								   Href="table"
								   OnClick="@(BoardOnClick(board))">
							<MudText Style="overflow:hidden;">
								@board.Name
							</MudText>
						</MudButton>
					</Virtualize>
				</NestedList>
			</MudListItem>
		</MudList>
	</MudPaper>
</MudPaper>
@* <MudOverlay Class="border-2"
            Visible="InviteVisible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleInvite">
    <Invite @onclick:stopPropagation />
</MudOverlay> *@
<MudOverlay Class="border-0"
			Visible="PopupMenuCreateBoard_____Visible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="TogglePopupMenuCreateBoard_____Visible">
	<PopupMenuCreateBoard      @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-0"
			Visible="PopupMenuCreateCustomViewVisible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="TogglePopupMenuCreateCustomViewVisible">
	<PopupMenuCreateCustomView @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
            Visible="SettingVisible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleSetting">
    <SettingList @onclick:stopPropagation />
</MudOverlay>

@code
{
	[CascadingParameter(Name = nameof(CurrentUserId))]
	public Guid CurrentUserId { get; set; }
	public bool                    InviteVisible { get; set; } = false;
	public bool PopupMenuCreateBoard_____Visible { get; set; } = false;
	public bool PopupMenuCreateCustomViewVisible { get; set; } = false;
	public bool SettingVisible { get; set; } = false;
	[Parameter]
	public string ActiveViewName { get; set; } = null!;
	[Parameter]
	public string ActiveViewIcon { get; set; } = null!;
	[Parameter]
	public Helper.ViewType ActiveViewType { get; set; }
	[Parameter]
	public Models.Board      ActiveBoard_____ { get; set; } = null!;
	[Parameter]
	public Models.CustomView ActiveCustomView { get; set; } = null!;
	[Parameter]
	public EventCallback<string> ActiveViewNameChanged { get; set; }
	[Parameter]
	public EventCallback<string> ActiveViewIconChanged { get; set; }
	[Parameter]
	public EventCallback<Helper.ViewType> ActiveViewTypeChanged { get; set; }
	[Parameter]
	public EventCallback<Models.Board     > ActiveBoard_____Changed { get; set; }
	[Parameter]
	public EventCallback<Models.CustomView> ActiveCustomViewChanged { get; set; }
	[CascadingParameter(Name = nameof(CurrentUserProfile))]
	public Models.Profile CurrentUserProfile { get; set; } = null!;

	public RealtimeChannel RealtimeChannelDeletesMembers     { get; set; } = null!;
	public RealtimeChannel RealtimeChannelDeletesBoards      { get; set; } = null!;
	public RealtimeChannel RealtimeChannelDeletesCustomViews { get; set; } = null!;

	public async Task UpdateActiveViewName(string newActiveViewName)
	{
		ActiveViewName = newActiveViewName;
		await ActiveViewNameChanged.InvokeAsync(ActiveViewName);
	}

	public async Task UpdateActiveViewIcon(string newActiveViewIcon)
	{
		ActiveViewIcon = newActiveViewIcon;
		await ActiveViewIconChanged.InvokeAsync(ActiveViewIcon);
	}

	public async Task UpdateActiveBoard_____(Models.Board      newActiveBoard_____)
	{
		ActiveBoard_____ = newActiveBoard_____;
		await ActiveBoard_____Changed.InvokeAsync(ActiveBoard_____);
	}

	public async Task UpdateActiveCustomView(Models.CustomView newActiveCustomView)
	{
		ActiveCustomView = newActiveCustomView;
		await ActiveCustomViewChanged.InvokeAsync(ActiveCustomView);
	}

	public async Task UpdateActiveViewType(Helper.ViewType newActiveViewType)
	{
		ActiveViewType = newActiveViewType;
		await ActiveViewTypeChanged.InvokeAsync(ActiveViewType);
	}

	public async Task      MyDayOnClick()
	{
		// await UpdateActiveBoard_____(null!);
		// await UpdateActiveCustomView(null!);
		await UpdateActiveViewName("My day");
		await UpdateActiveViewIcon( Icons.Material.Filled.Today);
		await UpdateActiveViewType(Helper.ViewType.   MyDayView);
	}

	public async Task  Next7DaysOnClick()
	{
		// await UpdateActiveBoard_____(null!);
		// await UpdateActiveCustomView(null!);
		await UpdateActiveViewName("Next 7 days");
		await UpdateActiveViewIcon( Icons.Material.Filled.NextWeek);
		await UpdateActiveViewType(Helper.ViewType.    DefaultView);
	}

	public async Task AllMyTasksOnClick()
	{
		// await UpdateActiveBoard_____(null!);
		// await UpdateActiveCustomView(null!);
		await UpdateActiveViewName("All my tasks");
		await UpdateActiveViewIcon( Icons.Material.Filled.Task);
		await UpdateActiveViewType(Helper.ViewType.DefaultView);
	}

	public Func<Task> BoardOnClick(Models.Board board)
	{
		return async () =>
		{
			await UpdateActiveBoard_____(board);
			await UpdateActiveCustomView(null!);
			await UpdateActiveViewName(board.Name);
			await UpdateActiveViewIcon(Icons.Material.Filled.Circle);
			await UpdateActiveViewType
			(Helper.ViewType.WorkspaceView);
		};
	}

	public Func<Task> CustomViewOnClick(Models.CustomView customView)
	{
		return async () =>
		{
			await UpdateActiveCustomView(customView);
			await UpdateActiveBoard_____(null!);
			await UpdateActiveViewName(customView.Name);
			await UpdateActiveViewIcon( Icons.Material.Filled.Today);
			await UpdateActiveViewType(Helper.ViewType.  CustomView);
		};
	}

	public void ToggleInvite()
	{
		InviteVisible = !
		InviteVisible;
	}

	public void TogglePopupMenuCreateBoard_____Visible()
	{
		PopupMenuCreateBoard_____Visible = !
		PopupMenuCreateBoard_____Visible;
	}

	public void TogglePopupMenuCreateCustomViewVisible()
	{
		PopupMenuCreateCustomViewVisible = !
		PopupMenuCreateCustomViewVisible;
	}

	public void ToggleSetting()
	{
		SettingVisible = !
		SettingVisible;
	}

	public void OnChangedCustomViews()
	{
		InvokeAsync(StateHasChanged);
	}
	public void OnChangedBoard__s()
	{
		InvokeAsync(StateHasChanged);
	}
	public void OnChangedMember_s()
	{
		InvokeAsync(StateHasChanged);
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
		await base.OnInitializedAsync();
		// CurrentUserProfile = (await SupabaseClient.From<Models.Profile>().Where(profile => profile.Id == CurrentUserId)
		// .Single())!;
		SupabaseImplementModelStateProviderService.ChangedCustomViews += OnChangedCustomViews;
		SupabaseImplementModelStateProviderService.ChangedBoard__s += OnChangedBoard__s;
		SupabaseImplementModelStateProviderService.ChangedMember_s += OnChangedMember_s;
		await SupabaseClient.Realtime.  ConnectAsync();
		RealtimeChannelDeletesMembers =
		await SupabaseClient.From<Models.Member    >().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesMember____);
		RealtimeChannelDeletesBoards  =
		await SupabaseClient.From<Models.Board     >().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesBoard_____);
		RealtimeChannelDeletesCustomViews =
		await SupabaseClient.From<Models.CustomView>().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesCustomView);
		}
		catch (Exception exception)
		{
			System.Diagnostics.Debug.WriteLine(exception.Message);
		}
	}

	public async void OnRealtimeDeletesMember____(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
	{
		if (ActiveBoard_____ == null)
			return;
		await InvokeAsync(async () =>
		{
			int currentUserInActiveBoard_____Count = await SupabaseClient.From<Models.Member>().Where
(member => member.BoardId == ActiveBoard_____.Id && member.ProfileId == CurrentUserId
).Count(Postgrest.Constants.CountType.Exact);
			if (currentUserInActiveBoard_____Count == 1)
			{
				return;
			}
		await ReturnToMyDayView_();
		});
	}

	public async void OnRealtimeDeletesBoard_____(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
	{
		if (ActiveBoard_____ == null)
			return;
		await InvokeAsync(async () =>
		{
			int activeBoardCount = await SupabaseClient.From<Models.Board>().Where(board => board.Id == ActiveBoard_____.Id)
.Count(Postgrest.Constants.CountType.Exact);
			if (activeBoardCount == 1)
			{
				return;
			}
		await ReturnToMyDayView_();
		});
	}

	public async void OnRealtimeDeletesCustomView(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
	{
		await InvokeAsync(async () =>
		{
		await ReturnToMyDayView_();
		});
	}

	public async Task ReturnToMyDayView_()
	{
		await MyDayOnClick();
		NavigationManager.NavigateTo("/myday", forceLoad: false);
		   StateHasChanged();
	}

	public void Dispose()
	{
		if (RealtimeChannelDeletesMembers     != null)
		    RealtimeChannelDeletesMembers    .Unsubscribe();
		if (RealtimeChannelDeletesBoards      != null)
		    RealtimeChannelDeletesBoards     .Unsubscribe();
		if (RealtimeChannelDeletesCustomViews != null)
		    RealtimeChannelDeletesCustomViews.Unsubscribe();

		SupabaseImplementModelStateProviderService.ChangedCustomViews -= OnChangedCustomViews;
		SupabaseImplementModelStateProviderService.ChangedBoard__s -= OnChangedBoard__s;
		SupabaseImplementModelStateProviderService.ChangedMember_s -= OnChangedMember_s;
	}
}
