@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopUpAndSubMenus

@implements IDisposable
@inject Supabase.Client SupabaseClient
@using Supabase.Realtime
@using Supabase.Realtime.PostgresChanges

<MudPaper Class="d-flex flex-column gap-2 pa-2"
          Style="overflow-y:scroll"
          Elevation="0"
          Width="300px"
          Height="100%">
    <MudButton Size="Size.Large"
               FullWidth="true">
        <MudPaper Class="d-flex flex-row gap-2 align-center"
                  Elevation="0"
                  Width="100%">
            <MudAvatar>
                <MudImage Src="@Helper.GetResource("/images/catsayhello.png")" />
            </MudAvatar>
            <MudText Style="font-family:inherit;font-size:large">
                -Name-
            </MudText>
        </MudPaper>
    </MudButton>
    <MudPaper Class=""
              Style=""
              Elevation="0"
              Width="100%"
              Height="100%">
        <MudList Class=""
                 Dense="true"
                 DisableGutters="true"
                 DisablePadding="true">
            @*default views*@
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.Today"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="myday"
                       OnClick="@(async () => await Update
("My day", @Icons.Material.Filled.Today, Helper.ViewType.MyDayView))">
                <MudText Style="font-family:inherit">My day</MudText>
            </MudButton>
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.NextWeek"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="kanban/next7days"
                       OnClick="@(async () => await Update
("Next 7 days", @Icons.Material.Filled.NextWeek, Helper.ViewType.DefaultView))">
                <MudText Style="font-family:inherit">Next 7 days</MudText>
            </MudButton>
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.Task"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="kanban/alltasks"
                       OnClick="@(async () => await Update
("All my task", @Icons.Material.Filled.Task, Helper.ViewType.DefaultView))">
                <MudText Style="font-family:inherit">All my tasks</MudText>
            </MudButton>
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.Task"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="table"
                       OnClick="@(async () => await Update
("Test", @Icons.Material.Filled.Task, Helper.ViewType.DefaultView))">
                <MudText Style="font-family:inherit">Test</MudText>
            </MudButton>
            @*custom views*@
            <MudListItem Class=""
                         InitiallyExpanded="true"
                         DisableGutters="true"
                         Dense="true">
                <ChildContent>
                    <MudPaper Class="d-flex flex-row align-center justify-space-between"
                              Elevation="0"
                              Width="100%">
                        <MudPaper Class=" d-flex flex-row gap-2"
                                  Elevation="0">
                            <MudIcon Icon="@Icons.Material.Filled.DashboardCustomize"
                                     Size="Size.Medium" />
                            <MudText Style="font-weight:bolder;">
                                Custom views
                            </MudText>
                        </MudPaper>
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       OnClick="ToggleCreateCustomView" />
                    </MudPaper>
                </ChildContent>
                <NestedList>
                    @foreach (Models.CustomView customView in CustomViews)
                    {
                        <MudButton Class="justify-start"
                                   StartIcon="@Icons.Material.Filled.Today"
                                   Size="Size.Medium"
                                   FullWidth="true"
                                   Href="test"
                                   OnClick="@(CustomViewOnClick(customView))">
                            <MudText Style="overflow:hidden">
                                @customView.Name
                            </MudText>
                        </MudButton>
                    }
                </NestedList>
            </MudListItem>
            @*workspace*@
            <MudListItem Class=""
                         Dense="true"
                         DisableGutters="true"
                         InitiallyExpanded="true">
                <ChildContent>
                    <MudPaper Class="d-flex flex-row align-center justify-space-between"
                              Elevation="0"
                              Width="100%">
                        <MudPaper Class="d-flex flex-row gap-2"
                                  Elevation="0">
                            <MudIcon Icon="@Icons.Material.Filled.Workspaces"
                                     Size="Size.Medium" />
                            <MudText Style="font-weight:bolder;">
                                Workspaces
                            </MudText>
                        </MudPaper>
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       OnClick="ToggleCreateBoard_____" />
                        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                        Size="Size.Small"
                        OnClick="ToggleInvite" /> *@
                    </MudPaper>
                </ChildContent>
                <NestedList>
                    @foreach (Models.Board board in Boards)
                    {
                        <MudButton Class="justify-start"
                                   Size="Size.Medium"
                                   FullWidth="true"
                                   Href="table"
                                   OnClick="@(BoardOnClick(board))">
                            <MudText Style="overflow:hidden">
                                @board.Name
                            </MudText>
                        </MudButton>
                    }
                </NestedList>
            </MudListItem>
        </MudList>
    </MudPaper>
</MudPaper>
@* <MudOverlay Class="border-2"
            Visible="InviteVisible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleInvite">
    <Invite @onclick:stopPropagation />
</MudOverlay> *@
<MudOverlay Class="border-2"
            Visible="CreateBoard_____Visible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleCreateBoard_____">
    <CreateBoard @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
            Visible="CreateCustomViewVisible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleCreateCustomView">
    <CreateCustomView @onclick:stopPropagation />
</MudOverlay>

@code
{
    public bool InviteVisible { get; set; } = false;
    public bool CreateBoard_____Visible { get; set; } = false;
    public bool CreateCustomViewVisible { get; set; } = false;
    [Parameter]
    public string ActiveViewName { get; set; } = null!;
    [Parameter]
    public string ActiveViewIcon { get; set; } = null!;
    [Parameter]
    public Guid ActiveBoard_____Id { get; set; }
    [Parameter]
    public Guid ActiveCustomViewId { get; set; }
    [Parameter]
    public Helper.ViewType ActiveViewType { get; set; }
    [Parameter]
    public EventCallback<string> ActiveViewNameChanged { get; set; }
    [Parameter]
    public EventCallback<string> ActiveViewIconChanged { get; set; }
    [Parameter]
    public EventCallback<Guid> ActiveBoard_____IdChanged { get; set; }
    [Parameter]
    public EventCallback<Guid> ActiveCustomViewIdChanged { get; set; }
    [Parameter]
    public EventCallback<Helper.ViewType> ActiveViewTypeChanged { get; set; }

    public RealtimeChannel RealtimeChannelBoards { get; set; } = null!;
    public RealtimeChannel RealtimeChannelCustomViews { get; set; } = null!;
    public List<Models.Board> Boards { get; set; } = new();
    public List<Models.CustomView> CustomViews { get; set; } = new();

    public async Task UpdateActiveViewName(string newActiveViewName)
    {
        ActiveViewName = newActiveViewName;
        await ActiveViewNameChanged.InvokeAsync(ActiveViewName);
    }

    public async Task UpdateActiveViewIcon(string newActiveViewIcon)
    {
        ActiveViewIcon = newActiveViewIcon;
        await ActiveViewIconChanged.InvokeAsync(ActiveViewIcon);
    }

    public async Task UpdateActiveBoard_____Id(Guid newActiveBoard_____Id)
    {
        ActiveBoard_____Id = newActiveBoard_____Id;
        await ActiveBoard_____IdChanged.InvokeAsync(ActiveBoard_____Id);
    }

    public async Task UpdateActiveCustomViewId(Guid newActiveCustomViewId)
    {
        ActiveCustomViewId = newActiveCustomViewId;
        await ActiveCustomViewIdChanged.InvokeAsync(ActiveCustomViewId);
    }

    public async Task UpdateActiveViewType(Helper.ViewType newActiveViewType)
    {
        ActiveViewType = newActiveViewType;
        await ActiveViewTypeChanged.InvokeAsync(ActiveViewType);
    }

    public async Task Update(
    string newActiveViewName,
    string newActiveViewIcon, Helper.ViewType newActiveViewType)
    {
        await UpdateActiveViewName(newActiveViewName);
        await UpdateActiveViewIcon(newActiveViewIcon);
        await UpdateActiveViewType(newActiveViewType);
    }

    public Func<Task> BoardOnClick(Models.Board board)
    {
        return async () =>
        {
            await UpdateActiveBoard_____Id(board.Id);
            await Update(board.Name, Icons.Material.Filled.Circle, Helper.ViewType.WorkspaceView);
        };
    }

    public Func<Task> CustomViewOnClick(Models.CustomView customView)
    {
        return async () =>
        {
            await UpdateActiveCustomViewId(customView.Id);
            await Update(customView.Name, Icons.Material.Filled.Today, Helper.ViewType.CustomView);
        };
    }

    public void ToggleInvite()
    {
        InviteVisible = !
        InviteVisible;
    }

    public void ToggleCreateBoard_____()
    {
        CreateBoard_____Visible = !
        CreateBoard_____Visible;
    }

    public void ToggleCreateCustomView()
    {
        CreateCustomViewVisible = !
        CreateCustomViewVisible;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SupabaseClient.Realtime.ConnectAsync();
        await FetchBoards();
        await FetchCustomViews();
        RealtimeChannelBoards =
        await SupabaseClient.From<Models.Member>().On(PostgresChangesOptions.ListenType.All,
        async (sender, changeEventArgs) =>
        {
            await FetchBoards();
            await InvokeAsync(StateHasChanged);
        });
        RealtimeChannelCustomViews =
        await SupabaseClient.From<Models.CustomView>().On(PostgresChangesOptions.ListenType.All,
        async (sender, changeEventArgs) =>
        {
            await FetchCustomViews();
            await InvokeAsync(StateHasChanged);
        });
    }

    public async Task FetchBoards()
    {
        Boards = (await SupabaseClient.From<Models.Board>().Get()).Models;
    }

    public async Task FetchCustomViews()
    {
        CustomViews = (await SupabaseClient.From<Models.CustomView>().Get()).Models;
    }

    public void Dispose()
    {
        RealtimeChannelBoards.Unsubscribe();
        RealtimeChannelCustomViews.Unsubscribe();
    }
}
