@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopUpAndSubMenus
@using WorkScheduleReminder.SharedBlazorComponents.Desktop.Setting
@using Microsoft.AspNetCore.Components.Web.Virtualization

@implements IDisposable
@inject ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@using Supabase.Realtime
@using Supabase.Realtime.Interfaces
@using Supabase.Realtime.PostgresChanges
@inject NavigationManager NavigationManager
@inject Services.Implementations.SupabaseAuthenticationStateProviderService SupabaseAuthenticationStateProviderService

<MudPaper Class="d-flex flex-column gap-2 pa-2"
		  Style="overflow-y:scroll"
		  Elevation="0"
		  Width="300px"
		  Height="100%">
    <MudButton Size="Size.Large"
               FullWidth="true"
               OnClick=ToggleSetting>
        <MudPaper Class="d-flex flex-row gap-2 align-center"
                  Elevation="0"
                  Width="100%">
            <MudAvatar>
                <MudImage Src="@Helper.GetResource("/images/catsayhello.png")" />
            </MudAvatar>
            <MudText Style="font-family:inherit;font-size:large">
                -Name-
            </MudText>
        </MudPaper>
    </MudButton>
    <MudPaper Class=""
              Style=""
              Elevation="0"
              Width="100%"
              Height="100%">
        <MudList Class=""
                 Dense="true"
                 DisableGutters="true"
                 DisablePadding="true">
            @*default views*@
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.Today"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="myday"
                       OnClick="MyDayOnClick">
                <MudText Style="font-family:inherit">My day</MudText>
            </MudButton>
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.NextWeek"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="kanban/next7days"
                       OnClick="Next7DaysOnClick">
                <MudText Style="font-family:inherit">Next 7 days</MudText>
            </MudButton>
            <MudButton Class="justify-start"
                       StartIcon="@Icons.Material.Filled.Task"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="calendar"
                       OnClick="AllMyTasksOnClick">
                <MudText Style="font-family:inherit">All my tasks</MudText>
            </MudButton>
			@*custom views*@
			<MudListItem Class=""
						 Dense="true"
						 DisableGutters="true"
						 InitiallyExpanded="true">
				<ChildContent>
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class=" d-flex flex-row gap-2"
								  Elevation="0">
							<MudIcon Icon="@Icons.Material.Filled.DashboardCustomize"
									 Size="Size.Medium" />
							<MudText Style="font-weight:bolder;">
								Custom views
							</MudText>
						</MudPaper>
						<MudIconButton Icon="@Icons.Material.Filled.Add"
									   Size="Size.Small"
									   OnClick="ToggleCreateCustomView" />
					</MudPaper>
				</ChildContent>
				<NestedList>
					@if (FetchingCustomViews)
					{
						<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="60px" />
					}
					<Virtualize Context="customView" Items="CustomViews">
						<MudButton @key="customView.Id"
								   Class="justify-start"
								   StartIcon="@Icons.Material.Filled.Today"
								   Size="Size.Medium"
								   FullWidth="true"
								   Href="test"
								   OnClick="@(CustomViewOnClick(customView))">
							<MudText Style="overflow:hidden">
								@customView.Name
							</MudText>
						</MudButton>
					</Virtualize>
				</NestedList>
			</MudListItem>
			@*workspace*@
			<MudListItem Class=""
						 Dense="true"
						 DisableGutters="true"
						 InitiallyExpanded="true">
				<ChildContent>
					<MudPaper Class="d-flex flex-row align-center justify-space-between"
							  Elevation="0"
							  Width="100%">
						<MudPaper Class="d-flex flex-row gap-2"
								  Elevation="0">
							<MudIcon Icon="@Icons.Material.Filled.Workspaces"
									 Size="Size.Medium" />
							<MudText Style="font-weight:bolder;">
								Workspaces
							</MudText>
						</MudPaper>
						<MudIconButton Icon="@Icons.Material.Filled.Add"
									   Size="Size.Small"
									   OnClick="ToggleCreateBoard_____" />
						@* <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
						Size="Size.Small"
						OnClick="ToggleInvite" /> *@
					</MudPaper>
				</ChildContent>
				<NestedList>
					@if (FetchingBoards)
					{
						<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="60px" />
					}
					<Virtualize Context="board" Items="Boards">
						<MudButton @key="board.Id"
								   Class="justify-start"
								   Size="Size.Medium"
								   FullWidth="true"
								   Href="table"
								   OnClick="@(BoardOnClick(board))">
							<MudText Style="overflow:hidden">
								@board.Name
							</MudText>
						</MudButton>
					</Virtualize>
				</NestedList>
			</MudListItem>
		</MudList>
	</MudPaper>
</MudPaper>
<MudOverlay Class="border-2"
			Visible="CreateBoard_____Visible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="ToggleCreateBoard_____">
	<CreateBoard      @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
			Visible="CreateCustomViewVisible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="ToggleCreateCustomView">
	<CreateCustomView @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Class="border-2"
            Visible="SettingVisible"
            DarkBackground="true"
            AutoClose="true"
            OnClick="ToggleSetting">
    <SettingList @onclick:stopPropagation />
</MudOverlay>

@code
{
    [CascadingParameter(Name = nameof(CurrentUserId))]
    public Guid CurrentUserId { get; set; }
    public bool InviteVisible { get; set; } = false;
    public bool CreateBoard_____Visible { get; set; } = false;
    public bool CreateCustomViewVisible { get; set; } = false;
    public bool SettingVisible { get; set; } = false;
    [Parameter]
    public string ActiveViewName { get; set; } = null!;
    [Parameter]
    public string ActiveViewIcon { get; set; } = null!;
    [Parameter]
    public Helper.ViewType ActiveViewType { get; set; }
    [Parameter]
    public Models.Board ActiveBoard_____ { get; set; } = null!;
    [Parameter]
    public Models.CustomView ActiveCustomView { get; set; } = null!;
    [Parameter]
    public EventCallback<string> ActiveViewNameChanged { get; set; }
    [Parameter]
    public EventCallback<string> ActiveViewIconChanged { get; set; }
    [Parameter]
    public EventCallback<Helper.ViewType> ActiveViewTypeChanged { get; set; }
    [Parameter]
    public EventCallback<Models.Board> ActiveBoard_____Changed { get; set; }
    [Parameter]
    public EventCallback<Models.CustomView> ActiveCustomViewChanged { get; set; }

    public RealtimeChannel RealtimeChannelAllMembers { get; set; } = null!;
    public RealtimeChannel RealtimeChannelAllBoards { get; set; } = null!;
    public RealtimeChannel RealtimeChannelAllCustomViews { get; set; } = null!;
    public RealtimeChannel RealtimeChannelDeletesMembers { get; set; } = null!;
    public RealtimeChannel RealtimeChannelDeletesBoards { get; set; } = null!;
    public RealtimeChannel RealtimeChannelDeletesCustomViews { get; set; } = null!;
    public List<Models.Board> Boards { get; set; } = new();
    public List<Models.CustomView> CustomViews { get; set; } = new();
    public bool FetchingBoards { get; set; } = true;
    public bool FetchingCustomViews { get; set; } = true;

	public async Task UpdateActiveViewName(string newActiveViewName)
	{
		ActiveViewName = newActiveViewName;
		await ActiveViewNameChanged.InvokeAsync(ActiveViewName);
	}

	public async Task UpdateActiveViewIcon(string newActiveViewIcon)
	{
		ActiveViewIcon = newActiveViewIcon;
		await ActiveViewIconChanged.InvokeAsync(ActiveViewIcon);
	}

    public async Task UpdateActiveBoard_____(Models.Board newActiveBoard_____)
    {
        ActiveBoard_____ = newActiveBoard_____;
        await ActiveBoard_____Changed.InvokeAsync(ActiveBoard_____);
    }

    public async Task UpdateActiveCustomView(Models.CustomView newActiveCustomView)
    {
        ActiveCustomView = newActiveCustomView;
        await ActiveCustomViewChanged.InvokeAsync(ActiveCustomView);
    }

	public async Task UpdateActiveViewType(Helper.ViewType newActiveViewType)
	{
		ActiveViewType = newActiveViewType;
		await ActiveViewTypeChanged.InvokeAsync(ActiveViewType);
	}

    // public async Task Update(
    // string newActiveViewName,
    // string newActiveViewIcon, Helper.ViewType newActiveViewType)
    // {
    // 	await UpdateActiveViewName(newActiveViewName);
    // 	await UpdateActiveViewIcon(newActiveViewIcon);
    // 	await UpdateActiveViewType(newActiveViewType);
    // }

    public async Task MyDayOnClick()
    {
        await UpdateActiveViewName("My day");
        await UpdateActiveViewIcon(Icons.Material.Filled.Today);
        await UpdateActiveViewType(Helper.ViewType.MyDayView);
    }

    public async Task Next7DaysOnClick()
    {
        await UpdateActiveViewName("Next 7 days");
        await UpdateActiveViewIcon(Icons.Material.Filled.NextWeek);
        await UpdateActiveViewType(Helper.ViewType.DefaultView);
    }

    public async Task AllMyTasksOnClick()
    {
        await UpdateActiveViewName("All my tasks");
        await UpdateActiveViewIcon(Icons.Material.Filled.Task);
        await UpdateActiveViewType(Helper.ViewType.DefaultView);
    }

    public Func<Task> BoardOnClick(Models.Board board)
    {
        return async () =>
        {
            await UpdateActiveBoard_____(board);
            await UpdateActiveCustomView(null!);
            await UpdateActiveViewName(board.Name);
            await UpdateActiveViewIcon(Icons.Material.Filled.Circle);
            await UpdateActiveViewType
            (Helper.ViewType.WorkspaceView);
        };
    }

    public Func<Task> CustomViewOnClick(Models.CustomView customView)
    {
        return async () =>
        {
            await UpdateActiveCustomView(customView);
            await UpdateActiveBoard_____(null!);
            await UpdateActiveViewName(customView.Name);
            await UpdateActiveViewIcon(Icons.Material.Filled.Today);
            await UpdateActiveViewType(Helper.ViewType.CustomView);
        };
    }

	public void ToggleInvite()
	{
		InviteVisible = !
		InviteVisible;
	}

	public void ToggleCreateBoard_____()
	{
		CreateBoard_____Visible = !
		CreateBoard_____Visible;
	}

	public void ToggleCreateCustomView()
	{
		CreateCustomViewVisible = !
		CreateCustomViewVisible;
	}

    public void ToggleSetting()
    {
        SettingVisible = !
        SettingVisible;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            await SupabaseClient.Realtime.ConnectAsync();
            await FetchBoards();
            await FetchCustomViews();
            RealtimeChannelAllMembers =
            await SupabaseClient.From<Models.Member>().On(PostgresChangesOptions.ListenType.All,
            async (sender, postgresChangesResponse) =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchBoards();
                    StateHasChanged();
                });
            });
            RealtimeChannelAllBoards =
            await SupabaseClient.From<Models.Board>().On(PostgresChangesOptions.ListenType.All,
            async (sender, postgresChangesResponse) =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchBoards();
                    StateHasChanged();
                });
            });
            RealtimeChannelAllCustomViews =
            await SupabaseClient.From<Models.CustomView>().On(PostgresChangesOptions.ListenType.All,
            async (sender, postgresChangesResponse) =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchCustomViews();
                    StateHasChanged();
                });
            });
            RealtimeChannelDeletesMembers =
            await SupabaseClient.From<Models.Member>().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesMember____);
            RealtimeChannelDeletesBoards =
            await SupabaseClient.From<Models.Board>().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesBoard_____);
            RealtimeChannelDeletesCustomViews =
            await SupabaseClient.From<Models.CustomView>().On(PostgresChangesOptions.ListenType.Deletes, OnRealtimeDeletesCustomView);
        }
        catch (Exception exception)
        {
            System.Diagnostics.Debug.WriteLine(exception.Message);
        }
    }

    public async void OnRealtimeDeletesMember____(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
    {
        await InvokeAsync(async () =>
        {
            int currentUserInActiveBoard_____Count = await SupabaseClient.From<Models.Member>().Where
    (member => member.BoardId == ActiveBoard_____.Id && member.ProfileId == CurrentUserId
    ).Count(Postgrest.Constants.CountType.Exact);
            if (currentUserInActiveBoard_____Count == 1)
            {
                return;
            }
            await ReturnToMyDayView_();
        });
    }

    public async void OnRealtimeDeletesBoard_____(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
    {
        await InvokeAsync(async () =>
        {
            int activeBoardCount = await SupabaseClient.From<Models.Board>().Where(board => board.Id == ActiveBoard_____.Id)
    .Count(Postgrest.Constants.CountType.Exact);
            if (activeBoardCount == 1)
            {
                return;
            }
            await ReturnToMyDayView_();
        });
    }

    public async void OnRealtimeDeletesCustomView(IRealtimeChannel sender, PostgresChangesResponse postgresChangesResponse)
    {
        await InvokeAsync(async () =>
        {
            await ReturnToMyDayView_();
        });
    }

    public async Task ReturnToMyDayView_()
    {
        await MyDayOnClick();
        NavigationManager.NavigateTo("/myday", forceLoad: false);
        StateHasChanged();
    }

    public async Task FetchBoards()
    {
        FetchingBoards = !false;
        Boards = (await SupabaseClient.From<Models.Board>().Get()).Models;
        FetchingBoards = false;
    }

    public async Task FetchCustomViews()
    {
        FetchingCustomViews = !false;
        CustomViews = (await SupabaseClient.From<Models.CustomView>().Get()).Models;
        FetchingCustomViews = false;
    }

    public void Dispose()
    {
        if (RealtimeChannelAllMembers != null)
            RealtimeChannelAllMembers.Unsubscribe();
        if (RealtimeChannelAllBoards != null)
            RealtimeChannelAllBoards.Unsubscribe();
        if (RealtimeChannelAllCustomViews != null)
            RealtimeChannelAllCustomViews.Unsubscribe();

        if (RealtimeChannelDeletesMembers != null)
            RealtimeChannelDeletesMembers.Unsubscribe();
        if (RealtimeChannelDeletesBoards != null)
            RealtimeChannelDeletesBoards.Unsubscribe();
        if (RealtimeChannelDeletesCustomViews != null)
            RealtimeChannelDeletesCustomViews.Unsubscribe();
    }
}
