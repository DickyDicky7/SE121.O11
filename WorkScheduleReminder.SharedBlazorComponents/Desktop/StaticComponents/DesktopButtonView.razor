@inject NavigationManager NavigationManager

@*Appear in workspace*@
<MudPaper Class="d-flex flex-row flex-wrap align-center"
		  Style="padding:8px;"
		  Elevation="0">
	<MudMenu Class=""
			 Size="Size.Small"
			 FullWidth="false"
			 DisableElevation="true"
			 Dense="true"
			 AnchorOrigin="Origin.BottomCenter"
			 TransformOrigin="Origin.TopCenter"
			 MaxHeight="250">
		<ActivatorContent>
			<MudButton StartIcon="@ActiveIcon"
					   Size="Size.Small">
				<MudText>View</MudText>
			</MudButton>
		</ActivatorContent>
		<ChildContent>
			@foreach ((
					string Icon,
					Helper.ViewTypeBoard ViewTypeBoard,
					string Text,
					string Href) in ViewTypeBoardItems)
			{
				<MudMenuItem AutoClose="true"
							 OnClick=@(ViewTypeBoardItemOnClick((Icon, ViewTypeBoard, Text, Href)))>
					<MudPaper Class="d-flex flex-row gap-2 align-center"
							  Style="background-color:transparent;"
							  Elevation="0">
						<MudIcon Size="Size.Small"
								 Icon="@Icon" />
						<MudText>@Text</MudText>
					</MudPaper>
				</MudMenuItem>
			}
		</ChildContent>
	</MudMenu>
</MudPaper>

@code
{
	[Parameter]
	public               Helper.ViewTypeBoard  ActiveViewTypeBoard        { get; set; }
	[Parameter]
	public EventCallback<Helper.ViewTypeBoard> ActiveViewTypeBoardChanged { get; set; }

	public static string ActiveIcon { get; set; } = Icons.Material.Filled.ViewKanban;
	public List<( string Icon,  Helper.ViewTypeBoard ViewTypeBoard,
	              string Text,
	              string Href)> ViewTypeBoardItems { get; set; } = new()
	{
		(Icons.Material.Filled.ViewKanban   , Helper.ViewTypeBoard.Kanban  , "Kanban"  , "kanban/board"),
		(Icons.Material.Filled.GridView     , Helper.ViewTypeBoard.Table   , "Table"   , "table")       ,
		(Icons.Material.Filled.CalendarToday, Helper.ViewTypeBoard.Calendar, "Calendar", "calendar")    ,
	};

	public Func<Task>   ViewTypeBoardItemOnClick ((
	string Icon, Helper.ViewTypeBoard ViewTypeBoard,
	string Text,
	string Href) viewTypeBoardItem)
	{
		return async () =>
		{
			ActiveIcon = viewTypeBoardItem.Icon;
			NavigationManager.NavigateTo(viewTypeBoardItem.Href, forceLoad: false, replace: false);
			      ActiveViewTypeBoard  = viewTypeBoardItem.ViewTypeBoard;
			await ActiveViewTypeBoardChanged.InvokeAsync(ActiveViewTypeBoard);
		};
	}

}
