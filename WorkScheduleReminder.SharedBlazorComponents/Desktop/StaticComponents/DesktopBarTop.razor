@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus

@implements IDisposable
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService

<MudPaper Class="d-flex flex-row align-center pa-2 justify-space-between"
		  Style="background-color:transparent;"
		  Elevation="0"
		  Width="100%">
	@* Toolbar1 *@
	<MudPaper Class="d-flex flex-row flex-wrap gap-2"
			  Elevation="0">
		@if (ActiveViewType != Helper.ViewType.MyDayView)
		{
			<DesktopOtherViewTitle />
			<DesktopButtonMember IsIndividualToWorkspaceChanged=
                                "IsIndividualToWorkspaceChanged" />
			@if (ActiveViewType == Helper.ViewType.WorkspaceView)
			{
				<DesktopButtonView ActiveViewTypeBoardChanged=
                                  "ActiveViewTypeBoardChanged"   />
			}
			@if (ActiveViewType == Helper.ViewType.WorkspaceView || ActiveViewType == Helper.ViewType.CustomView)
			{
				<DesktopButtonFilter TagByBoard__IdsToFilterChanged=
                                    "TagByBoard__IdsToFilterChanged"
                                     TagByProfileIdsToFilterChanged=
                                    "TagByProfileIdsToFilterChanged"
                                     AssigneeIdsToFilterChanged=
                                    "AssigneeIdsToFilterChanged"
                                     DueDateRangeToFilterChanged=
                                    "DueDateRangeToFilterChanged" />
			}
			<DesktopButtonMore />
		}
		else
		{
			<DesktopMyDayViewTitle />
		}
	</MudPaper>
	@* Toolbar2 *@
	<MudPaper Class="d-flex flex-row flex-wrap gap-2 py-2"
			  Elevation="0">
		<MudTooltip Placement="Placement.Left"
					Arrow="true"
					Color="Color.Dark" Text="Sync">
			<MudIconButton Style=@(OnSyncStyle)
						   OnClick="SyncOnClick"
						   Class="rounded-cycle"
						   Size="Size.Small"
						   Icon="@Icons.Material.Filled.Sync" />
		</MudTooltip>
		@* <MudTooltip Placement="Placement.Left"
					Arrow="true"
					Color="Color.Dark" Text="Notifications">
			<MudIconButton Class="rounded-cycle"
						   Size="Size.Small"
						   Icon="@Icons.Material.Filled.Notifications"
						   OnClick="ToggleNotifiVisible" />
		</MudTooltip> *@
		<MudTooltip Placement="Placement.Left"
					Arrow="true"
					Color="Color.Dark" Text="Toggle light/dark mode">
			<MudToggleIconButton Toggled=@(IsDarkMode)
								 ToggledChanged=@(ToggleDarkMode)
								 Icon="@Icons.Material.Filled.LightMode"
								 ToggledIcon="@Icons.Material.Filled.DarkMode"
								 Color="Color.Warning"
								 ToggledColor="Color.Primary"
								 Size="Size.Small"
								 ToggledSize="Size.Small" />
			@* <MudSwitch @bind-Checked=IsDarkMode/> *@
		</MudTooltip>
		<MudTooltip Placement="Placement.Left"
					Arrow="true"
					Color="Color.Dark" Text="Search">
			<MudIconButton Class="rounded-cycle"
						   Style="margin:0 5px 0 0;"
						   Size="Size.Small"
						   Icon="@Icons.Material.Filled.Search"
						   OnClick="ToggleSearchVisible" />
		</MudTooltip>
@* 		<MudSwitch T="bool"
				   Checked="IsIndividualToWorkspace"
				   Label="@(IsIndividualToWorkspaceLabel)"
				   Color="Color.Tertiary"
				   ThumbIcon="@Icons.Material.Filled.Workspaces"
				   CheckedChanged="IsIndividualToWorkspaceSwitchOnCheckedChanged" />
 *@
	</MudPaper>
</MudPaper>
<MudOverlay Class="border-2"
			Visible="@NotifiVisible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="ToggleNotifiVisible">
	<Notification @onclick:stopPropagation />
</MudOverlay>
<MudOverlay Visible="@SearchVisible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="ToggleSearchVisible">
	<SearchName   @onclick:stopPropagation />
</MudOverlay>

@code
{
	[CascadingParameter(Name = nameof(ActiveViewType))]
	public Helper.ViewType ActiveViewType { get; set; }

	// [Parameter]
	// public bool IsDarkMode = 

	[Parameter]
	public bool                IsIndividualToWorkspace        { get; set; }
	[Parameter]
	public EventCallback<bool> IsIndividualToWorkspaceChanged { get; set; }

	[Parameter]
	public               Helper.ViewTypeBoard  ActiveViewTypeBoard        { get; set; }
	[Parameter]
	public EventCallback<Helper.ViewTypeBoard> ActiveViewTypeBoardChanged { get; set; }

	[Parameter]
	public               List<Guid>  TagByBoard__IdsToFilter        { get; set; } = null!;
	[Parameter]
	public EventCallback<List<Guid>> TagByBoard__IdsToFilterChanged { get; set; }
	[Parameter]
	public               List<Guid>  TagByProfileIdsToFilter        { get; set; } = null!;
	[Parameter]
	public EventCallback<List<Guid>> TagByProfileIdsToFilterChanged { get; set; }

	[Parameter]
	public               List<Guid>  AssigneeIdsToFilter        { get; set; } = null!;
	[Parameter]
	public EventCallback<List<Guid>> AssigneeIdsToFilterChanged { get; set; }

	[Parameter]
	public               DateRange  DueDateRangeToFilter        { get; set; } = null!;
	[Parameter]
	public EventCallback<DateRange> DueDateRangeToFilterChanged { get; set; }

	public string OnSyncStyle { get; set; } = "margin:0 0 0 5px;";
	public bool NotifiVisible { get; set; } = false;
	public bool SearchVisible { get; set; } = false;
	public System.Timers.Timer Timer { get; set; } = null!;
	public bool OnSync { get; set; } = false;

	[Parameter]
	public               bool  IsDarkMode        { get; set; } = false;
	[Parameter]
	public EventCallback<bool> IsDarkModeChanged { get; set; }

	public async Task ToggleDarkMode(  bool isDarkMode)
	{
		IsDarkMode = isDarkMode;
		await IsDarkModeChanged.InvokeAsync(IsDarkMode);
	}

	public void ToggleNotifiVisible()
	{
		NotifiVisible = !NotifiVisible;
	}

	public void ToggleSearchVisible()
	{
		SearchVisible = !SearchVisible;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		Timer = new(TimeSpan.FromMinutes(10));
		Timer.AutoReset = true;
		Timer.Enabled   = true;
		Timer.Elapsed += Timer_OnElapsed;
		Timer.Start();
	}

	public void Timer_OnElapsed(object? sender, System.Timers.ElapsedEventArgs elapsedEventArgs)
	{
		SyncOnClick();
	}

	public void SyncOnClick()
	{
		// if (SupabaseImplementModelStateProviderService
		// 	.GetType().GetProperties()
		// 	.Where(property => property.Name.StartsWith("Fetching")).Any(property => property.GetValue
		// 	(SupabaseImplementModelStateProviderService)!.ToString() == "True" ))

		if (OnSync)
		{
			return;
		}

		OnSync = true;
		OnSyncStyle = @"
			margin:0 0 0 5px;
			animation-name: spin;
			animation-duration: 1000ms;
			animation-iteration-count: 2;
			animation-timing-function: ease-in-out;
			";
		Task.Run(async () =>
		{
			await Task.Delay(2100);
			OnSyncStyle = "margin:0 0 0 5px;";
			OnSync      = false;
			await InvokeAsync(StateHasChanged);
		});
	}

	public void Dispose()
	{
		Timer.Stop();
		Timer.Elapsed -= Timer_OnElapsed;
		Timer.Close();
		Timer.Dispose();
	}
}
