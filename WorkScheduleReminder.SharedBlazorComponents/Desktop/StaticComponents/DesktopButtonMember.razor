@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus

<MudPaper Class="d-flex flex-row flex-wrap gap-2 pa-2 align-center"
		  Elevation="0">
	@if (ActiveViewType == Helper.ViewType.DefaultView)
	{
		<MudSwitch T="bool"
				   Checked="IsIndividualToWorkspace"
				   Label="@(IsIndividualToWorkspaceLabel)"
				   Color="Color.Tertiary"
				   ThumbIcon="@Icons.Material.Filled.Workspaces"
				   CheckedChanged="IsIndividualToWorkspaceSwitchOnCheckedChanged" />
	}
	else if (ActiveViewType == Helper.ViewType.CustomView)
	{
		<MudText Style="font-size:small;font-weight:100;">
			Private view
		</MudText>
	}
	else if (ActiveViewType == Helper.ViewType.WorkspaceView)
	{
		<MudButton Class=""
				   StartIcon="@Icons.Material.Filled.People"
				   Size="Size.Small"
				   OnClick="ToggleIsPopupMenuMemberVisible">
			<MudText>
				Member
			</MudText>
		</MudButton>
	}
</MudPaper>
<MudOverlay Visible="IsPopupMenuMemberVisible"
			DarkBackground="true"
			AutoClose="true"
			OnClick="ToggleIsPopupMenuMemberVisible">
	<PopupMenuMember @onclick:stopPropagation />
</MudOverlay>

@code
{
	[CascadingParameter(Name = nameof(ActiveViewType))]
	public Helper.ViewType ActiveViewType { get; set; }
	[Parameter]
	public bool                IsIndividualToWorkspace        { get; set; } = false;
	[Parameter]
	public EventCallback<bool> IsIndividualToWorkspaceChanged { get; set; }

	public string IsIndividualToWorkspaceLabel { get; set; } = "Individual";
	public bool   IsPopupMenuMemberVisible     { get; set; } = false;

	public async Task IsIndividualToWorkspaceSwitchOnCheckedChanged
	(            bool isIndividualToWorkspace)
	{
		IsIndividualToWorkspace =
		isIndividualToWorkspace ;
		IsIndividualToWorkspaceLabel =
		isIndividualToWorkspace switch { true => "Workspace", false => "Individual", };
		await
		IsIndividualToWorkspaceChanged.InvokeAsync(
		isIndividualToWorkspace);
	}

	public void ToggleIsPopupMenuMemberVisible()
	{
		IsPopupMenuMemberVisible = !
		IsPopupMenuMemberVisible ;
	}
}
