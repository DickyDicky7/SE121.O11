@using WorkScheduleReminder.SharedBlazorComponents.Desktop.PopupAndSubMenus

@inject       ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@inject Services.Implementations.SupabaseImplementModelStateProviderService SupabaseImplementModelStateProviderService

<MudPaper Class="d-flex flex-row flex-wrap align-center"
		  Elevation="0">
	<MudMenu Class=""
			 Size="Size.Small"
			 FullWidth="false"
			 DisableElevation="true"
			 Dense="true"
			 AnchorOrigin="Origin.BottomCenter"
			 TransformOrigin="Origin.TopCenter"
			 MaxHeight="250">
		<ActivatorContent>
			<MudIconButton Icon="@Icons.Material.Filled.MoreVert"
						   Size="Size.Small" />
		</ActivatorContent>
		<ChildContent>
			@foreach (MenuItem menuItem in ViewTypeMenuItems[ActiveViewType])
			{
				<MudMenuItem OnClick="menuItem.ToggleVisible"
							 AutoClose=true>
					<MudText Style="background-color:transparent;">
						@menuItem.Name
					</MudText>
				</MudMenuItem>
			}
		</ChildContent>
	</MudMenu>
</MudPaper>
@foreach (MenuItem menuItem in ViewTypeMenuItems[ActiveViewType])
{
	if (menuItem.Child != null)
	{
		<MudOverlay Visible="menuItem.Visible"
					ZIndex="10"
					DarkBackground="true"
					AutoClose="true"
					OnClick="menuItem.ToggleVisible">
			@menuItem.Child
		</MudOverlay>
	}
}

@code
{

	[CascadingParameter(Name = nameof(ActiveViewType))]
	public Helper.ViewType ActiveViewType { get; set; }
	[CascadingParameter(Name = nameof(ActiveBoard_____))]
	public Models.Board ActiveBoard_____  { get; set; } = null!;
	[CascadingParameter(Name = nameof(CurrentUserId))]
	public Guid CurrentUserId { get; set; }
	public bool CurrentUserIsOwnerOfActiveBoard
	         => CurrentUserId ==    ActiveBoard_____.OwnerId;

	public record MenuItem
	{
		public string  Name { get; set; } = null!;
		public bool Visible { get; set; } = false;
		public RenderFragment Child { get; set; } = null!;
		public void ToggleVisible() => Visible = !Visible;
	}

	public Dictionary<Helper.ViewType, List<MenuItem>> ViewTypeMenuItems = Enum.GetValues<Helper.ViewType>()
	.    ToDictionary<Helper.ViewType,
	                  Helper.ViewType, List<MenuItem>>(
	viewType => viewType,
	viewType => new()  );

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		List<MenuItem>   DefaultViewItems = ViewTypeMenuItems[Helper.ViewType.  DefaultView];
		List<MenuItem>    CustomViewItems = ViewTypeMenuItems[Helper.ViewType.   CustomView];
		List<MenuItem> WorkspaceViewItems = ViewTypeMenuItems[Helper.ViewType.WorkspaceView];

		DefaultViewItems.Add(new MenuItem() { Name = "Clear completed" });
		DefaultViewItems.Add(new MenuItem() { Name =    "Multi-select" });
		DefaultViewItems.Add(new MenuItem() { Name = "Print" });

		CustomViewItems.Add(new MenuItem()
		{
			Name  = "Edit",
			Child = @<PopupMenuCreateCustomView @onclick:stopPropagation />
		});
		CustomViewItems.Add(new MenuItem()
		{
			Name  = "Delete",
			Child = @<PopupMenuConfirm          @onclick:stopPropagation
			ConfirmTitle_="Are you sure to delete this view"
			ConfirmAction="Delete" />
		});

		MenuItem workspaceViewMenuItem1 = new MenuItem() ;
		workspaceViewMenuItem1.Name  = "Board activities";
		workspaceViewMenuItem1.Child = null!;
		WorkspaceViewItems.Add(workspaceViewMenuItem1);
		
		MenuItem workspaceViewMenuItem2 = new MenuItem();
		workspaceViewMenuItem2.Name  = "Board tags";
		workspaceViewMenuItem2.Child = @<PopupMenuTagAndTagging @onclick:stopPropagation
		TogglePopupMenuTagAndTaggingVisible="workspaceViewMenuItem2.ToggleVisible" />;
		WorkspaceViewItems.Add(workspaceViewMenuItem2);

		MenuItem workspaceViewMenuItem3 = new MenuItem();
		workspaceViewMenuItem3.Name  = "Board sections" ;
		workspaceViewMenuItem3.Child = @<PopupMenuBoardSections @onclick:stopPropagation
		TogglePopupMenuBoardSectionsVisible="workspaceViewMenuItem3.ToggleVisible" />;
		WorkspaceViewItems.Add(workspaceViewMenuItem3);

		MenuItem workspaceViewMenuItem4 = new MenuItem();
		workspaceViewMenuItem4.Name  = "Multi-select" ;
		workspaceViewMenuItem4.Child = null!;
		WorkspaceViewItems.Add(workspaceViewMenuItem4);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (ActiveViewType is Helper.ViewType.WorkspaceView)
		{
		if (ViewTypeMenuItems[Helper.ViewType.WorkspaceView].Count == 5)
		{
			ViewTypeMenuItems[Helper.ViewType.WorkspaceView].RemoveAt(4);
		}
			if (!CurrentUserIsOwnerOfActiveBoard)
			ViewTypeMenuItems[Helper.ViewType.WorkspaceView].Add(new MenuItem()
			{
				Name  = "Leave board",
				Child = @<PopupMenuConfirm @onclick:stopPropagation
				ConfirmTitle_="Are you sure to leave this board"
				ConfirmAction="Leave"
				ConfirmActionOnClick="LeaveBoardOnClick" />
			});
			else
			ViewTypeMenuItems[Helper.ViewType.WorkspaceView].Add(new MenuItem()
			{
				Name  = "Delete board",
				Child = @<PopupMenuConfirm @onclick:stopPropagation
				ConfirmTitle_="Are you sure to delete this board"
				ConfirmAction="Delete"
				ConfirmActionOnClick="DeleteBoardOnClick" />
			});
		}
	}

	public async Task DeleteBoardOnClick()
	{
		try
		{
			await ActiveBoard_____
			.Delete<Models.Board>();
			Snackbar.Add(Message.Success.SUCCESSFULLY_REMOVE_BOARD(ActiveBoard_____.Name),
			Severity.Success);
		}
		catch (Postgrest.Exceptions.PostgrestException postgrestException)
		{
			System  .Diagnostics.Debug.WriteLine(postgrestException.Message);
			Snackbar.Add(Message.Error.CANNOT_REMOVE_BOARD(ActiveBoard_____.Name, Message.Error.SOMETHING_WENT_WRONG),
			Severity.Error);
		}
	}

	public async Task LeaveBoardOnClick()
	{
		try
		{
			await SupabaseImplementModelStateProviderService
		   .Member_s.First<
		    Models.Member>(
			member => member.ProfileId == CurrentUserId &&
			member.BoardId == ActiveBoard_____.Id).Delete<Models.Member>();
			Snackbar.Add(Message.Success.SUCCESSFULLY_LEAVE_BOARD(ActiveBoard_____.Name),
			Severity.Success);
		}
		catch (Postgrest.Exceptions.PostgrestException postgrestException)
		{
			System  .Diagnostics.Debug.WriteLine(postgrestException.Message);
			Snackbar.Add(Message.Error.CANNOT_LEAVE_BOARD(ActiveBoard_____.Name, Message.Error.SOMETHING_WENT_WRONG),
			Severity.Error);
		}
	}

}
