@using WorkScheduleReminder.SharedBlazorComponents.Services.Implementations

@inject NavigationManager NavigationManager
@inject ISnackbar         Snackbar
@inject SupabaseAuthenticationStateProviderService SupabaseAuthenticationStateProviderService

<MudPaper Class="d-flex flex-column"
		  Style=""
		  Elevation="0"
		  Width="100vw"
		  Height="100vh">
	<MudPaper Class="d-flex"
			  Elevation="0"
			  MinWidth="800px"
			  Width="100%"
			  MaxWidth="1600px">
		<MudIconButton Class=""
					   Style=""
					   Icon="@Icons.Material.Filled.ArrowBack"
					   Size="Size.Large"
					   Href=""
					   Color="Color.Primary"
					   OnClick="NotifyBackClicked" />
	</MudPaper>
	<MudPaper Class="d-flex justify-center"
			  Elevation="0"
			  MinWidth="800px"
			  Width="100%"
			  Height="100%"
			  MaxWidth="1600px">
		<MudPaper Class="d-flex flex-wrap align-self-center gap-2"
				  Elevation="0"
				  Width="25%">
			@if (PasswordRecoveryCodeAccepted)
			{
				<MudTextField @bind-Value="NewPassword"
							  Class="rounded-pill"
							  Placeholder="Enter new password"
							  Immediate="true"
							  DisableUnderLine="true"
							  FullWidth="true"
							  Variant="Variant.Outlined"
							  Margin="Margin.Dense" />
				<MudTextField @bind-Value="NewPasswordConfirmed"
							  Class="rounded-pill"
							  Placeholder="Confirm new password"
							  Immediate="true"
							  DisableUnderLine="true"
							  FullWidth="true"
							  Variant="Variant.Outlined"
							  Margin="Margin.Dense" />
				<MudButton Class="d-flex flex-wrap rounded-pill"
						   Size="Size.Medium"
						   FullWidth="true"
						   Variant=Variant.Outlined
						   OnClick="OnConfirmResetPasswordButtonClick">
					<MudText>
						Confirm reset password
					</MudText>
				</MudButton>
			}
			else
			{
				<MudTextField @bind-Value="Email"
							  Class="rounded-pill"
							  Placeholder="Enter email"
							  Immediate="true"
							  DisableUnderLine="true"
							  FullWidth="true"
							  Variant="Variant.Outlined"
							  Margin="Margin.Dense" />
				<MudButton Class="d-flex flex-wrap rounded-pill"
						   Size="Size.Medium"
						   FullWidth="true"
						   Variant=Variant.Outlined
						   OnClick="OnSendRecoveryCodeButtonClick">
					<MudText>
						Send password recovery code
					</MudText>
				</MudButton>
				<MudTextField @bind-Value="PasswordRecoveryCode"
							  Class="rounded-pill"
							  Placeholder="Enter password recovery code"
							  Immediate="true"
							  DisableUnderLine="true"
							  FullWidth="true"
							  Variant="Variant.Outlined"
							  Margin="Margin.Dense"
							  InputType="InputType.Password" />
				<MudButton Class="d-flex flex-wrap rounded-pill"
						   Size="Size.Medium"
						   FullWidth="true"
						   Variant=Variant.Outlined
						   OnClick="OnConfirmButtonClick">
					<MudText>
						Confirm
					</MudText>
				</MudButton>
			}
		</MudPaper>
	</MudPaper>
</MudPaper>

@code
{
	[Parameter]
	public EventCallback NotifyBackClicked { get; set; }

	public string Email { get; set; } = string.Empty;
	public string PasswordRecoveryCode         { get; set; } = string.Empty;
	public bool   PasswordRecoveryCodeAccepted { get; set; } = false;
	public string NewPassword          { get; set; } = string.Empty;
	public string NewPasswordConfirmed { get; set; } = string.Empty;

	public async Task OnConfirmResetPasswordButtonClick()
	{      await SupabaseAuthenticationStateProviderService
    .    ResetPassword(
           NewPassword         ,
           NewPasswordConfirmed, Snackbar);
	}

	public async Task OnConfirmButtonClick()
	{      PasswordRecoveryCodeAccepted =
	       await SupabaseAuthenticationStateProviderService
    . CheckPasswordRecoveryCode(
	       PasswordRecoveryCode, Snackbar);
	}

	public async Task OnSendRecoveryCodeButtonClick()
	{      await SupabaseAuthenticationStateProviderService. SendPasswordRecoveryCodeToEmail(Email, Snackbar);
	}
}
