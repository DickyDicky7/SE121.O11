<MudPaper @attributes=@AdditionalAttributes
		  Class="d-flex flex-column flex-wrap gap-2 pa-2 justify-center"
		  Style="border-radius:20px"
		  Elevation="0">
	<MudText Style="font-weight:500; font-size:large;">Reminder</MudText>
	<MudTimePicker @bind-Time=Time
				   AmPm="true"
				   Label="Time"
				   PickerVariant="PickerVariant.Dialog"
				   AnchorOrigin="Origin.BottomCenter"
				   TransformOrigin="Origin.TopCenter"
				   Variant="Variant.Outlined" />
	<MudDatePicker @bind-Date=@Date
				   DateFormat="dd/MM/yyyy"
				   Label="Date"
				   ImmediateText="true"
				   PickerVariant="PickerVariant.Dialog"
				   AnchorOrigin="Origin.BottomCenter"
				   TransformOrigin="Origin.TopCenter"
				   Variant="Variant.Outlined" />
	<MudChipSet @bind-SelectedChip="@SelectedChip" @bind-SelectedChip:after="OnSelectedChipChanged"
				Filter="true"
				Class="d-flex flex-column gap-2 pa-2">
		<MudPaper Class="d-flex flex-grow-1 pa-2 justify-space-between"
				  Elevation="0"
				  Width="100%">
			<MudChip Class="d-flex flex-wrap rounded-pill"
					 Size="Size.Small"
					 Variant="Variant.Text"
					 Text="Daily" />
			<MudChip Class="d-flex flex-wrap rounded-pill"
					 Size="Size.Small"
					 Variant="Variant.Text"
					 Text="Weekly" />
		</MudPaper>
		<MudPaper Class="d-flex flex-grow-1 pa-2 justify-space-between"
				  Elevation="0"
				  Width="100%">
			<MudChip Class="d-flex flex-wrap rounded-pill"
					 Size="Size.Small"
					 Variant="Variant.Text"
					 Text="Monthly" />
			<MudChip Class="d-flex flex-wrap rounded-pill"
					 Size="Size.Small"
					 Variant="Variant.Text"
					 Text="Yearly" />
		</MudPaper>
	</MudChipSet>
	@if (Recurring == "Weekly")
	{
		<MudText>aaaa</MudText>
	}
	@if (Recurring == "Monthly")
	{
		<MudText>bbbb</MudText>
	}
	<MudSwitch @bind-Checked="@TaskNeverEnd"
			   Label="Task never end"
			   Color="Color.Tertiary"
			   ThumbIcon="@Icons.Material.Filled.Workspaces" />
</MudPaper>

@code
{
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }

	public TimeSpan? Time { get; set; } = new(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
	public DateTime? Date { get; set; } = DateTime.Today;

	public static MudChip? SelectedChip { get; set; }
	public string Recurring { get; set; } = "None";

	public void OnSelectedChipChanged()
	{
		Recurring = SelectedChip?.Text
		?? "None";
	}

	public bool TaskNeverEnd { get; set; } = false;
}
