<MudPaper @attributes="AdditionalAttributes"
          Class="d-flex flex-column gap-2 pa-2 justify-center"
          Style="border-radius:20px;overflow:hidden;"
          Elevation="0"
          Width="400px"
          Height="400px"
          MaxHeight="80vh">
    @if (CurrentMode != Mode.Select)
    {
        @*Navigation bar*@
        <MudPaper Class="d-flex flex-row justify-start"
                  Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Size="Size.Small"
                           OnClick="(()=>ChangeMode(Mode.Select, string.Empty, Color.Error))" />
            @if (CurrentMode == Mode.Add)
            {
                <MudText Style="font-size:larger;font-weight:bold">
                    Add tag
                </MudText>
            }
            else
            {
                <MudText Style="font-size:larger;font-weight:bold">
                    Edit tag
                </MudText>
            }
        </MudPaper>
        @*Enter tag's name*@
        <MudTextField @bind-Value="NewTagName"
                      MaxLength="15"
                      Counter="15"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      Clearable="true"
                      Required="true"
                      AutoFocus="true"
                      TextUpdateSuppression="false"
                      Label="Name your tag!" />
        @*Choose tag's color*@
        <MudChipSet @bind-SelectedChip="SelectedColoredChip"
                    Style="display:grid; grid-gap:8px;grid-template-columns:repeat(2,1fr);"
                    Filter="true"
                    Mandatory="true">
            @foreach (Color color in Colors)
            {
                <MudChip Default="@(color == ProcessingTagColor)"
                         Text="#Tag"
                         Size="Size.Small"
                         Color="color" 
                         SelectedColor="color"
                         Variant="Variant.Text"/>
            }
        </MudChipSet>
        @*Action button(s)*@
        @if (CurrentMode == Mode.Add)
        {
            @*Add tag*@
            <MudButton Class="rounded-pill"
                       Size="Size.Small"
                       FullWidth="true"
                       Disabled="string.IsNullOrWhiteSpace(NewTagName)"
                       OnClick="SaveTag">
                <MudText Color="Color.Info">Save</MudText>
            </MudButton>
        }
        else
        {
            @*Edit tag*@
            <MudPaper Class="d-flex flex-row"
                      Elevation="0"
                      Width="100%">
                <MudPaper Elevation="0"
                          Width="50%">
                    <MudButton Class="rounded-pill"
                               Size="Size.Small"
                               Color="Color.Error"
                               FullWidth="true"
                               OnClick="DeleteTag">
                        <MudText>Delete</MudText>
                    </MudButton>
                </MudPaper>
                <MudPaper Elevation="0"
                          Width="50%">
                    <MudButton Class="rounded-pill"
                               Size="Size.Small"
                               FullWidth="true"
                               Color="Color.Info"
                               Disabled="string.IsNullOrWhiteSpace(NewTagName)"
                               OnClick="SaveTag">
                        <MudText>Save</MudText>
                    </MudButton>
                </MudPaper>
            </MudPaper>
        }
    }
    else
    {
        @*Navigation bar*@
        <MudPaper Class="d-flex flex-row justify-space-between"
                  Elevation="0">
            <MudText Style="font-size:larger;font-weight:bold">
                @(EnableTagging == true ? "Select tag(s)" : "View tag")
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Size="Size.Small"
                           OnClick="(()=>ChangeMode(Mode.Add, string.Empty, Color.Error))" />
        </MudPaper>
        @*list of tags*@
        <MudPaper Style="overflow:scroll;"
                  Elevation="0"
                  Width="100%"
                  Height="100%">
            @foreach (Tagging Tagging in Taggings)
            {
                <MudPaper Class="d-flex flex-row pa-2 justify-space-between align-center"
                          Elevation="0"
                          Width="100%">
                    <MudPaper Class="d-flex flex-row pa-1 align-center"
                              Elevation="0">
                        @if (EnableTagging == true)
                        {
                            <MudCheckBox @bind-Checked=@Tagging.Checked
                                         Size="Size.Small"
                                         Color="Tagging.Tag.Color"
                                         Dense="true" />
                        }
                        <MudText Color="Tagging.Tag.Color">@Tagging.Tag.Name</MudText>
                    </MudPaper>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Size="Size.Small"
                                   OnClick="(()=>ChangeMode(Mode.Edit, Tagging.Tag.Name, Tagging.Tag.Color))" />
                </MudPaper>
            }
        </MudPaper>
        @*Action button*@
        if (EnableTagging == true)
        {
            <MudButton Class="rounded-pill"
                       Size="Size.Small"
                       FullWidth="true"
                       OnClick="SaveTagging">
                <MudText Color="Color.Info">Save</MudText>
            </MudButton>
        }
    }
</MudPaper>

@code
{
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter]
    public bool EnableTagging { get; set; } = true;
    public enum Mode { Select, Add, Edit }
    public Mode CurrentMode = Mode.Select;
    //new Tag's info when add/edit
    public MudChip SelectedColoredChip { get; set; } = null!;
    public string NewTagName { get; set; } = string.Empty;
    //processing Tag's info
    public string ProcessingTagName { get; set; } = string.Empty;
    public Color ProcessingTagColor { get; set; }

    public record Tag
    {
        public string Name { get; set; } = string.Empty;
        public Color Color { get; set; }
    }
    public record Tagging
    {
        public Tag Tag { get; set; } = null!;
        public bool Checked { get; set; } = false;
    }
    public List<Tag> Tags { get; set; } = new();
    public List<Tagging> Taggings { get; set; } = new();
    public List<Color> Colors { get; set; } = new List<Color>();

    public void ChangeMode(Mode NextMode, string _ProcessingTagName, Color _ProcessingTagColor)
    {
        ProcessingTagName = _ProcessingTagName;
        ProcessingTagColor = _ProcessingTagColor;
        if (NextMode == Mode.Add)
        {
            NewTagName = string.Empty;
        }
        else if (NextMode == Mode.Edit)
        {
            NewTagName = ProcessingTagName;
        }
        CurrentMode = NextMode;
    }
    public void SaveTag()
    {
        if (CurrentMode == Mode.Add)
        {
            if (Tags.Contains(new Tag() { Name = NewTagName, Color = SelectedColoredChip.Color }))
            {
                return;
            }
            Tags.Add(new Tag() { Name = NewTagName, Color = SelectedColoredChip.Color });
        }
        else if (CurrentMode == Mode.Edit)
        {
            int index = Tags.FindIndex(x => x == new Tag() { Name = ProcessingTagName, Color = ProcessingTagColor });
            Tags[index] = new Tag() { Name = NewTagName, Color = SelectedColoredChip.Color };
        }
        CurrentMode = Mode.Select;
        ResetTaggings();
    }
    public void SaveTagging()
    {

    }
    public void DeleteTag()
    {
        Tags.Remove(new Tag() { Name = ProcessingTagName, Color = ProcessingTagColor });
        CurrentMode = Mode.Select;
        ResetTaggings();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Colors.Add(Color.Error);
        Colors.Add(Color.Warning);
        Colors.Add(Color.Success);
        Colors.Add(Color.Info);
        Colors.Add(Color.Primary);
        Colors.Add(Color.Secondary);
        Colors.Add(Color.Tertiary);
        Colors.Add(Color.Dark);
    }
    public void ResetTaggings()
    {
        //hàm này để xem ui thôi
        Taggings.Clear();
        foreach (Tag Tag in Tags)
        {
            Taggings.Add(new Tagging() { Tag = Tag });
        }
    }
}
