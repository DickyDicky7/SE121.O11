<MudPaper @attributes=AdditionalAttributes
          Class="d-flex flex-column gap-2 pa-2"
          Style="border-radius:20px;overflow:scroll"
          Elevation="0"
          Width="250px"
          Height="500px">
    <MudPaper Class="d-flex flex-row align-center justify-space-between"
              Elevation="0"
              Width="100%">
        <MudText Style="margin:4px">
            Untagged
        </MudText>
        <MudCheckBox @bind-Checked=UntaggedChecked
                     CheckedIcon="@Icons.Material.Filled.Check"
                     UncheckedIcon="@Icons.Material.Filled.Close"
                     Size="Size.Small"
                     Color="Color.Info"
                     UnCheckedColor="Color.Error"
                     Dense="true" DisableRipple="true" />
    </MudPaper>
    @foreach (TagChecked tagChecked in TagFilterList)
    {
        <MudPaper Class="d-flex flex-row align-center justify-space-between"
                  Elevation="0"
                  Width="100%">
            <MudText Style="margin:4px" Color="tagChecked.Color">
                @tagChecked.Name
            </MudText>
            <MudCheckBox @bind-Checked=tagChecked.Checked
                         CheckedIcon="@Icons.Material.Filled.Check"
                         UncheckedIcon="@Icons.Material.Filled.Close"
                         Size="Size.Small"
                         Color="Color.Info"
                         UnCheckedColor="Color.Error"
                         Dense="true" DisableRipple="true" />
        </MudPaper>
    }
</MudPaper>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    public bool UntaggedChecked { get; set; } = false;
    public record TagChecked()
    {
        public string Name { get; set; } = string.Empty;
        public Color Color { get; set; } = Color.Tertiary;
        public bool Checked { get; set; } = false;
    }
    public List<TagChecked> TagFilterList = new List<TagChecked>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TagFilterList.Add(new TagChecked() { Name = "hihi", Color = Color.Error });
        TagFilterList.Add(new TagChecked() { Name = "hehe", Color = Color.Warning });
        TagFilterList.Add(new TagChecked() { Name = "haha", Color = Color.Tertiary });
        TagFilterList.Add(new TagChecked() { Name = "huhu", Color = Color.Secondary });
        TagFilterList.Add(new TagChecked() { Name = "hihi", Color = Color.Error });
        TagFilterList.Add(new TagChecked() { Name = "hehe", Color = Color.Warning });
        TagFilterList.Add(new TagChecked() { Name = "haha", Color = Color.Tertiary });
        TagFilterList.Add(new TagChecked() { Name = "huhu", Color = Color.Secondary });
        TagFilterList.Add(new TagChecked() { Name = "hihi", Color = Color.Error });
        TagFilterList.Add(new TagChecked() { Name = "hehe", Color = Color.Warning });
        TagFilterList.Add(new TagChecked() { Name = "haha", Color = Color.Tertiary });
        TagFilterList.Add(new TagChecked() { Name = "huhu", Color = Color.Secondary });
        TagFilterList.Add(new TagChecked() { Name = "hihi", Color = Color.Error });
        TagFilterList.Add(new TagChecked() { Name = "hehe", Color = Color.Warning });
        TagFilterList.Add(new TagChecked() { Name = "haha", Color = Color.Tertiary });
        TagFilterList.Add(new TagChecked() { Name = "huhu", Color = Color.Secondary });
    }
}
