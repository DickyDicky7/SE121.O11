<MudPaper Class="d-flex flex-column gap-2 pa-2 justify-center"
          Style="border-radius:20px;"
          Elevation="0"
          Width="300px" @attributes="AdditionalAttributes">
    @if (CurrentMode != Mode.Select)
    {
        @*Navigation bar*@
        <MudPaper Class="d-flex flex-row justify-start"
                  Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Size="Size.Small"
                           OnClick="(()=>ChangeMode(Mode.Select))" />
            @if (CurrentMode == Mode.Add)
            {
                <MudText Typo="Typo.h6">Add tag</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">Edit tag</MudText>
            }
        </MudPaper>
        @*Enter tag's name*@
        <MudTextField @bind-Value="TagName"
                      MaxLength="15"
                      Counter="15"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      Clearable="true"
                      Required="true"
                      AutoFocus="true"
                      Label="Name your tag!" />
        @*Choose tag's color*@
        <MudChipSet @bind-SelectedChip="SelectedColoredChip"
                    Filter="true"
                    Mandatory="true">
            <MudChip Default="true"
                     Text="#Tag"
                     Size="Size.Small"
                     Color="Color.Error" />
            @foreach (Color color in Colors)
            {
                <MudChip Text="#Tag"
                         Size="Size.Small"
                         Color="color" />
            }
        </MudChipSet>
        @*Action button(s)*@
        @if (CurrentMode == Mode.Add)
        {
            @*Add tag*@
            <MudButton Class="rounded-pill"
                       Size="Size.Small"
                       FullWidth="true"
                       Disabled="string.IsNullOrWhiteSpace(TagName)"
                       OnClick="SaveTag">
                <MudText Color="Color.Info">Save</MudText>
            </MudButton>
        }
        else
        {
            @*Edit tag*@
            <MudPaper Class="d-flex flex-row"
                      Elevation="0"
                      Width="100%">
                <MudPaper Elevation="0"
                          Width="50%">
                    <MudButton Class="rounded-pill"
                               Size="Size.Small"
                               FullWidth="true"
                               OnClick="DeleteTag">
                        <MudText Color="Color.Error">Delete</MudText>
                    </MudButton>
                </MudPaper>
                <MudPaper Elevation="0"
                          Width="50%">
                    <MudButton Class="rounded-pill"
                               Size="Size.Small"
                               FullWidth="true"
                               Disabled="string.IsNullOrWhiteSpace(TagName)"
                               OnClick="SaveTag">
                        <MudText Color="Color.Info">Save</MudText>
                    </MudButton>
                </MudPaper>
            </MudPaper>
        }
    }
    else
    {
        @*Navigation bar*@
        <MudPaper Class="d-flex flex-row justify-space-between"
                  Elevation="0">
            <MudText Typo="Typo.h6">Select tag(s)</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Size="Size.Small"
                           OnClick="(()=>ChangeMode(Mode.Add))" />
        </MudPaper>
        @*list of tags*@
        <MudPaper Elevation="0"
                  Width="100%">
            @foreach ((string text, Color color) in TagInfos)
            {
                <MudPaper Class="d-flex flex-row pa-2 justify-space-between"
                          Elevation="0">
                    <MudText Color="color">@text</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Size="Size.Small"
                                   OnClick="(()=>ChangeMode(Mode.Edit))" />
                </MudPaper>
            }
        </MudPaper>
        @*Action button*@
        <MudButton Class="rounded-pill"
                   Size="Size.Small"
                   FullWidth="true"
                   OnClick="SaveTagging">
            <MudText Color="Color.Info">Save</MudText>
        </MudButton>
    }
</MudPaper>

@code
{
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    public enum Mode { Select, Add, Edit }
    public Mode CurrentMode = Mode.Select;

    public MudChip SelectedColoredChip { get; set; } = null!;
    public string TagName { get; set; } = string.Empty;
    public string EditingTagName { get; set; } = string.Empty;
    public Color EditingTagColor { get; set; }

    public List<(string text, Color color)> TagInfos { get; set; } = new();
    private List<Color> Colors { get; set; } = new List<Color>();

    private void ChangeMode(Mode NextMode)
    {
        if (NextMode == Mode.Add)
        {
            //empty tagname, color default
            TagName = string.Empty;
        }
        else if (NextMode == Mode.Edit)
        {
            //tagname = editing tag name, color = editing tag color
            TagName = EditingTagName;

        }
        CurrentMode = NextMode;
    }
    private void SaveTag()
    {
        if (CurrentMode == Mode.Add)
        {
            if (TagInfos.Contains((text: TagName, SelectedColoredChip.Color)))
            {
                return;
            }
            TagInfos.Add((text: TagName, color: SelectedColoredChip.Color));
            TagName = string.Empty;
        }
        else if (CurrentMode == Mode.Edit)
        {
            int index = TagInfos.FindIndex(x => x == (EditingTagName, EditingTagColor));
            TagInfos[index] = new(TagName, SelectedColoredChip.Color);
        }
        CurrentMode = Mode.Select;
    }
    private void SaveTagging()
    {

    }
    private void DeleteTag()
    {
        int index = TagInfos.FindIndex(x => x == (EditingTagName, EditingTagColor));
        TagInfos.RemoveAt(index);
        CurrentMode = Mode.Select;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Colors.Add(Color.Warning);
        Colors.Add(Color.Success);
        Colors.Add(Color.Info);
        Colors.Add(Color.Primary);
        Colors.Add(Color.Secondary);
        Colors.Add(Color.Tertiary);
        Colors.Add(Color.Dark);
    }
}
